{
    "version": "https://jsonfeed.org/version/1",
    "title": "Adventures in Csharp",
    "description": "",
    "home_page_url": "https://Pilvinen.github.io",
    "feed_url": "https://Pilvinen.github.io/feed.json",
    "user_comment": "",
    "icon": "https://Pilvinen.github.io/media/website/Hedgehog.png",
    "author": {
        "name": "Pilvinen"
    },
    "items": [
        {
            "id": "https://Pilvinen.github.io/binary-addition.html",
            "url": "https://Pilvinen.github.io/binary-addition.html",
            "title": "Binary addition",
            "summary": "Let's take a look at how binary addition can be done by using bitwise operations. Why would we want to do this? Simply because we can. And also because it's&hellip;",
            "content_html": "<p>Let's take a look at how binary addition can be done by using bitwise operations. Why would we want to do this? Simply because we  can. And also because it's fun and will help us understand how bitwise operations work and can be used together.</p>\n<pre><code class=\"language-cs\">\npublic byte AddBytes(byte a, byte b) {\n    while (b != 0) {\n        var carryBits = (byte) (a &amp; b);\n        a = (byte) (a ^ b);\n        b = (byte) (carryBits &lt;&lt; 1);\n    }\n    return a;\n}\n</code></pre>\n<p>Let's take an overview of what just happened.</p>\n<p>Essentially we <strong>add</strong> two bytes together. You get that much from the name of the method.</p>\n<p>The signature of the <strong>AddBytes</strong> method also tells us that it takes in two <strong>bytes</strong>, <strong>a</strong> and <strong>b</strong> as parameters, and returns a <strong>byte</strong> which contains the result of the addition.</p>\n<p>Inside the method we loop until <strong>b</strong> is zero. Inside the while loop we <strong>AND</strong> (<strong>&amp;</strong>), then we <strong>XOR</strong> (<strong>^</strong>), and finally we <strong>left shift</strong> (<strong>&lt;&lt;</strong>) by one.</p>\n<p>And, apparently, as a result we get two binary numbers added together nicely, just like in our everyday base-10, where we could calculate something like <code>2 + 2 = 4</code> </p>\n<p>So why does the above piece of code work and do what it does? Let's break it down and make it simple.</p>\n<p>The first operation inside the while loop is storing temporarily in <strong>carryBits</strong> variable the result of the bitwise <strong>AND</strong> (<strong>&amp;</strong>) operation between a and b, ie:</p>\n<pre><code class=\"language-cs\">var carryBits = (byte) (a &amp; b);</code></pre>\n<p>There's a little bit of casting going on here through and through because C# doesn't support performing bitwise operations directly on the actual <code>byte</code> type, it converts them for the bitwise operations. You could also perform these operations on the <code>int</code> type, for example, in which case you would have:</p>\n<pre><code class=\"language-cs\">var carryBits = a &amp; b;</code></pre>\n<p>Don't get distracted by the casting.</p>\n<p>So, we're carrying bits. But what is carrying? Let's take a quick refresher on carrying in math. Carrying is just like in normal everyday addition:</p>\n<pre><code class=\"language-cs\">\n   122\n+  921\n= 1043</code></pre>\n<p>Where you add the numbers together which are on top of each other and you combine them at the bottom for the final result. You have the ones, you have the tens, you have the hundreds, and you have the thousands. In the same way in binary you have the ones, you have the twos, you have the fours, you have the eights, and so on. It's just base-2 (0, and 1) instead of base-10 (0, 1, 2, 3, 4, 5, 6, 7, 8, and 9) before the numbers flip over to the next scale.</p>\n<p>In the above example carrying happens when you add the one hundred and nine hundred together, you carry the one to the thousands and in hundreds you then have a zero because <code>100 + 900</code> doesn't leave a remainder in the hundreds. If you had <code>100 + 1100</code> instead you  would add the thousands: <code>0 * 1000 + 1 * 1000 = 1000</code>, and then you would add the hundreds: <code>1 * 100 + 1 * 100 = 200</code>. And finally you would add all the different values together (no more carrying to process) and you'd end up with a total of 1200.</p>\n<p>So carrying happens when you add two numbers together (for example <code>9 + 9</code>) and they don't fit in the scale (in this case the ones) and you have to move, ie. you'd have to carry, the overflow to the tens. You'd end up with 18.</p>\n<p>In binary it works in exactly the same way. When you get overflow from addition you move it up, you carry it over.</p>\n<p>The only differences are that in binary you, usually, go from right to left, and 0 means that the value isn't set, and 1 means the value is set. Therefore:</p>\n<pre><code class=\"language-cs\">1101</code></pre>\n<p>Simply means, from right to left:t 1 * 1 + 0 * 2 + 1 * 4 + 1 * 8. From right to left -&gt; ones (set), twos (not set), fours (set), eights (set). Giving us the total of 13 in our every day base-10.</p>\n<pre><code class=\"language-cs\">\nvar a = (byte) 0b_0101; // (This is a \"binary literal\" in C#)\nvar b = (byte) 0b_0110;\nvar carryBits = (byte) (a &amp; b);</code></pre>\n<p>So, when we do a bitwise AND operation, like <code>0101 &amp; 0110</code>(as shown in the above example) simply imagine in your head that you place the numbers on top of each other like in regular base-10 calculus:</p>\n<pre><code class=\"language-cs\">\n  0101\n&amp; 0110\n= 0100</code></pre>\n<p>The bitwise AND operation returns 1 only when the two overlapping binary numbers are both 1. For all other binary values it returns 0.</p>\n<p>So why are we doing this and storing the result in <code>carryBits</code>? Because it's exactly the same as when you add <code>100 + 900</code>, you know you need to carry the hundreds into thousands, except now you need to carry the overflowing bits. Now we know that there are overlapping values, and when we add them together we will need to carry this bit position to the next one.</p>\n<p>It should be starting to make sense now. Let's move on.</p>\n<pre><code class=\"language-cs\">a = (byte) (a ^ b);</code></pre>\n<p>Here we are storing the result of an <strong>XOR</strong> (<strong>^</strong>) operation between a and b in the <strong>a</strong>. We are basically <em>simulating addition</em> with XOR.</p>\n<p>What XOR does is:</p>\n<pre><code class=\"language-cs\">\n  0101\n^ 0110\n= 0011</code></pre>\n<p> It returns 1 only when the two bits that are being compared are different from each other.</p>\n<p>We have already safely stored the overflowing bits in the temporary <code>carryBits</code>and now we have copied the rest of the bits which are <em>not</em> overflowing (no need to carry anything) to <strong>a</strong>.</p>\n<p>We can now perform the final bitwise operation which is the <strong>left bitshift</strong>. What left bitshift does is that it simply moves all the bits left by whatever number you want to move them. For example:</p>\n<pre><code class=\"language-cs\">\n  var a = (byte) 0b_0001; // a is 0001\n  a = a &lt;&lt; 1;             // a is 0010\n  a = a &lt;&lt; 1;             // a is 0100\n  a = a &lt;&lt; 1;             // a is 1000\n  a = a &lt;&lt; 1;             // a is 0000</code></pre>\n<p>In the final left bitshift operation we lose our data. By default we get behavior which simply drops overflowing bits - you lose them, they are gone.</p>\n<p>And if you move it by two:</p>\n<pre><code class=\"language-cs\">\nvar a = (byte) 0b_0001; // a is 0001\na = a &lt;&lt; 2;             // a is 0100</code></pre>\n<p> The bits are simply shifted left by two positions.</p>\n<p>By now you might be starting to realize \"Wait... but what if I have an overflow, carry bit, at position like:</p>\n<pre><code class=\"language-cs\">1000</code></pre>\n<p>Where there is nowhere to go?\" </p>\n<p>That's right. In that kind of situations you would get an incorrect answer from bitwise binary addition. For simplicity's sake this article doesn't show you how to handle situations like that where you actually run out of space from your value type. It can be handled, but the code gets much more complex and is therefore not a very good place to show the basic principles of binary bitwise addition and is therefore out of the scope of this article.</p>\n<pre><code class=\"language-cs\">\nb = (byte) (carryBits &lt;&lt; 1);</code></pre>\n<p>Now that you understand what a left bitshift does, it's not hard to see what's going on here. We're simply <em>moving the carry bits</em>, the overflowing bits, one step further in the scale of numbers. One becomes two, two becomes four, and so on.</p>\n<p>We assign the result into <strong>b</strong>, all the numbers in b just moved one step left. The while loop is now ready for another round until there are no more <code>1</code> bits left in <strong>b</strong>.</p>\n<p>When b is zero we're ready to exit the while-loop and return <strong>a</strong> where we have shifted, combined, and shuffled all of our bits iteration by iteration. We're moving and fitting everything together in a nice and orderly line of bits.</p>\n<p>Logic! There's nothing better.</p>\n<p>If you don't understand binary addition straight away by simply reading this article, don't fret. There's hope for you yet. It's like driving a bicycle. You don't learn how to drive by simply reading a manual. Once you understand the basic principles of binary bitwise operations you have to play with them, and experiment with them.</p>\n<p>That's how you learn.</p>",
            "image": "https://Pilvinen.github.io/media/posts/2/Binary-1920x1280.jpg",
            "author": {
                "name": "Pilvinen"
            },
            "tags": [
                   "Csharp",
                   "C#",
                   "Bitwise",
                   "Binary"
            ],
            "date_published": "2020-10-28T23:12:01+02:00",
            "date_modified": "2020-10-29T14:08:34+02:00"
        },
        {
            "id": "https://Pilvinen.github.io/array-flattening.html",
            "url": "https://Pilvinen.github.io/array-flattening.html",
            "title": "Array flattening",
            "summary": "One dimensional arrays, or flat arrays as they are sometimes called, have desirable properties. They are fast. They are simple to access and to iterate through. They can easily be assigned&hellip;",
            "content_html": "<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://Pilvinen.github.io/media/posts/1/Array_flattening.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://Pilvinen.github.io/media/posts/1/responsive/Array_flattening-xs.png 300w ,https://Pilvinen.github.io/media/posts/1/responsive/Array_flattening-sm.png 480w ,https://Pilvinen.github.io/media/posts/1/responsive/Array_flattening-md.png 768w ,https://Pilvinen.github.io/media/posts/1/responsive/Array_flattening-lg.png 1024w ,https://Pilvinen.github.io/media/posts/1/responsive/Array_flattening-xl.png 1360w ,https://Pilvinen.github.io/media/posts/1/responsive/Array_flattening-2xl.png 1600w\"  width=\"1281\" height=\"720\"></figure>\n<p><strong>One dimensional arrays</strong>, or <strong>flat arrays</strong> as they are sometimes called, have desirable properties. They are fast. They are simple to access and to iterate through. They can easily be assigned to contiguous memory blocks.</p>\n<p>The above picture shows how <strong>indexing</strong> works when we turn our multi-dimensional array into a flat array.</p>\n<pre><code class=\"language-cs\">int index = rowWidth * row + col;</code></pre>\n<p>The above code pretty much explains it all. But in case you're like me, and you sometimes have difficulties understanding things until you've studied them thoroughly, I will walk you through the gist of it.</p>\n<p>In the example above we have a multi-dimensional <code>3 x 4</code> array. 3 rows (0-2) and 4 columns (0-3) and, and we want to find the index for <code>1,2</code>in other words, we want the index for <strong>row position 1</strong>, <strong>column position 2</strong>, and we want to find that index position in our <em>one dimensional flat array</em> which is essentially emulating a multi-dimensional 3 x 4 array.</p>\n<p>We take the <strong>width</strong> of our <strong>rows</strong>, ie. their actual size (<strong>4</strong> columns wide) and we <strong>multiply</strong> it with the <em>index</em> of the <strong>row</strong> that we want to access (<strong>1</strong>). In other words <code>rowWidth * row</code> ie. <code>4 * 1</code> in our example. This gives us the combined length of all the <em>previous</em> rows of data (because the index starts from 0, we essentially always skip the current one), ie. <strong>row 0</strong> is the previous row in this case. <code>4 * 1 = 4</code>We have 4 entries in all the previous rows.</p>\n<p>Next we want to add our index location on the <strong>column</strong> to this number. This gives us the final index value. In our example our location on the column is 2, therefore we add <code>4 + 2 = 6</code>, giving us the final index of <strong>6</strong>.</p>\n<p>The explanation is probably harder to follow than the code and picture, but there you have it.</p>",
            "image": "https://Pilvinen.github.io/media/posts/1/Array_flattening.png",
            "author": {
                "name": "Pilvinen"
            },
            "tags": [
                   "Csharp",
                   "C#",
                   "Arrays"
            ],
            "date_published": "2020-10-28T16:42:04+02:00",
            "date_modified": "2020-10-29T02:57:35+02:00"
        }
    ]
}
