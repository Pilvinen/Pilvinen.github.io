<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Learning Csharp</title>
    <link href="https://Pilvinen.github.io/feed.xml" rel="self" />
    <link href="https://Pilvinen.github.io" />
    <updated>2020-10-28T18:15:49+02:00</updated>
    <author>
        <name>Pilvinen</name>
    </author>
    <id>https://Pilvinen.github.io</id>

    <entry>
        <title>Array flattening</title>
        <author>
            <name>Pilvinen</name>
        </author>
        <link href="https://Pilvinen.github.io/array-flattening.html"/>
        <id>https://Pilvinen.github.io/array-flattening.html</id>
            <category term="Csharp"/>
            <category term="C#"/>
            <category term="Arrays"/>

        <updated>2020-10-28T16:48:17+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://Pilvinen.github.io/media/posts/1/Array_flattening.png" alt="Array flattening" />
                     One dimensional arrays, or flat arrays as they are sometimes called, have desirable properties. They are fast. They are simple to access and iterate through. They can easily be assigned&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://Pilvinen.github.io/media/posts/1/Array_flattening.png" alt="Array flattening" />
                <p><img class="post__image" src="https://Pilvinen.github.io/media/posts/1/Array_flattening.png" width="1281" height="720"></p>
<p>One dimensional arrays, or flat arrays as they are sometimes called, have desirable properties. They are fast. They are simple to access and iterate through. They can easily be assigned to contiguous memory blocks.</p>
<p>The above picture shows how indexing works when we turn our multi-dimensional array into a flat array.</p>
<p>We take the width of our rows and multiply it with the row we want to access. So if we're on row 1 we would want to multiply <code>1 * rowWidth</code>. This gives us the length of the previous rows of data, the rows we've already passed by, ie. row 0 in this case which has 4 entries, ie. <code>1 * 4 = 4</code>.</p>
<p>Next we want to add our location on the column with the entries we've already passed. This gives us the final index. Our location on the column is 2 in the above example, therefore we add <code>4 + 2 = 6</code>, giving us the final index of 6.</p>
            ]]>
        </content>
    </entry>
</feed>
