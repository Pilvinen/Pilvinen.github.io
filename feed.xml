<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Adventures in Csharp</title>
    <link href="https://Pilvinen.github.io/feed.xml" rel="self" />
    <link href="https://Pilvinen.github.io" />
    <updated>2020-10-28T20:34:26+02:00</updated>
    <author>
        <name>Pilvinen</name>
    </author>
    <id>https://Pilvinen.github.io</id>

    <entry>
        <title>Array flattening</title>
        <author>
            <name>Pilvinen</name>
        </author>
        <link href="https://Pilvinen.github.io/array-flattening.html"/>
        <id>https://Pilvinen.github.io/array-flattening.html</id>
            <category term="Csharp"/>
            <category term="C#"/>
            <category term="Arrays"/>

        <updated>2020-10-28T20:34:20+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://Pilvinen.github.io/media/posts/1/Array_flattening.png" alt="Array flattening" />
                     One dimensional arrays, or flat arrays as they are sometimes called, have desirable properties. They are fast. They are simple to access and to iterate through. They can easily be&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://Pilvinen.github.io/media/posts/1/Array_flattening.png" alt="Array flattening" />
                <p><img class="post__image" src="https://Pilvinen.github.io/media/posts/1/Array_flattening.png" width="1281" height="720"></p>
<p><strong>One dimensional arrays</strong>, or <strong>flat arrays</strong> as they are sometimes called, have desirable properties. They are fast. They are simple to access and to iterate through. They can easily be assigned to contiguous memory blocks.</p>
<p>The above picture shows how <strong>indexing</strong> works when we turn our multi-dimensional array into a flat array.</p>
<p>We take the <strong>width</strong> of our <strong>rows</strong>, ie. their actual amount (4) and <strong>multiply</strong> it with the <em>index</em> of the <strong>row</strong> we want to access (1). In other words <code>rowWidth * row</code> ie. <code>4 * 1</code> in our example. This gives us the combined length of all the <em>previous</em> rows of data (because the index starts from 0), ie. <strong>row 0</strong> in this case - which has 4 entries (indices 0-3), ie. <code>1 * 4 = 4</code>.</p>
<p>Next we want to add our index location on the <strong>column</strong> to this number. This gives us the final index. In our example our location on the column is 2, therefore we add <code>4 + 2 = 6</code>, giving us the final index of <strong>6</strong>.</p>
            ]]>
        </content>
    </entry>
</feed>
