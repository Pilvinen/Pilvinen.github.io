<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>Csharp and Game Development Notes</title>
    <link href="https://pilvimaa.fi/feed.xml" rel="self" />
    <link href="https://pilvimaa.fi" />
    <updated>2024-07-03T01:24:09+03:00</updated>
    <author>
        <name>Pilvinen</name>
    </author>
    <id>https://pilvimaa.fi</id>

    <entry>
        <title>How to setup SQLite database with EF Core and Godot</title>
        <author>
            <name>Pilvinen</name>
        </author>
        <link href="https://pilvimaa.fi/how-to-setup-sqlite-database-with-ef-core-and-godot/"/>
        <id>https://pilvimaa.fi/how-to-setup-sqlite-database-with-ef-core-and-godot/</id>
        <media:content url="https://pilvimaa.fi/media/posts/19/Database.png" medium="image" />
            <category term="tutorial"/>
            <category term="sqlite"/>
            <category term="ef core"/>
            <category term="database"/>
            <category term="Godot"/>
            <category term="Csharp"/>

        <updated>2024-07-03T01:24:09+03:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://pilvimaa.fi/media/posts/19/Database.png" alt="Database" />
                    EF Core is a popular high level object relational mapper (ORM) which can have various databases at the backend. As a database noobie, I recently had a bit of a&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://pilvimaa.fi/media/posts/19/Database.png" class="type:primaryImage" alt="Database" /></p>
                <p>EF Core is a popular high level object relational mapper (ORM) which can have various databases at the backend.</p>
<p>As a database noobie, I recently had a bit of a trouble setting it up with Godot and SQLite. There was very little practical information available from a beginner’s perspective for setting it up successfully with Godot.</p>
<p>I hit a dead end several times trying to follow the official MS docs and bunch of tutorials, but eventually with a help from a friend got it working.</p>
<p>So I thought I might as well write a quick article about it - from my own unique database noob perspective. In case someone else is having the same challenges.</p>
<p>If you’re looking for educated, accurate, precise and scientific description of how this piece of… technology… works, avert your eyes and never return!</p>
<p>At the time of writing this, Godot 4.2.2 has been out for a while and Godot 4.3 hasn’t yet been released. I’m running on .NET 8 and using C# 12. These instructions have been written for that in mind and specifically for Rider IDE. If you’re dealing with another IDE or the command line, you will have to figure those parts out for yourself.</p>
<h1 id="setting-up-a-class-library">Setting up a class library</h1>
<p>Since we’re going to use the Migrations feature of EF Core, to get things working  properly with Godot’s SDK, you’re going to need to create your database as a separate project, as a <strong>class library</strong>.</p>
<p>To do that, right click your solution in Rider’s solution explorer and select <strong>Add &gt; New Project</strong> and make it a <strong>Class Library</strong>. It will be created directly under your main project for easy access. You can call it “Database”, or what ever you like.</p>
<h1 id="linking">Linking</h1>
<p>To be able to do anything with the Database project it needs to be linked with your main project. So right click in Rider’s solution explorer your main project and select <strong>Add &gt; Reference</strong>, select the box for Database and click the <strong>Add</strong> button. Done.</p>
<h1 id="dealing-with-assemblyinfo-duplicate-attributes">Dealing with AssemblyInfo duplicate attributes</h1>
<p>You might have noticed that there’s now a funny new folder in your main project, which is from the Database project. You might be tempted to exclude it, and if you do, you’re on your own dealing with potential issues that might arise from that.</p>
<p>In this tutorial we’re going to edit the your main project’s <code>.csproj</code> file and add inside the <code>&lt;PropertyGroup&gt;&lt;/PropertyGroup&gt;</code> tags near the top the following mystical tags:</p>
<pre><code class="language-xml">&lt;GenerateAssemblyInfo&gt;false&lt;/GenerateAssemblyInfo&gt;
</code></pre>
<p>And its good buddy:</p>
<pre><code class="language-xml">&lt;GenerateTargetFrameworkAttribute&gt;false&lt;/GenerateTargetFrameworkAttribute&gt;
</code></pre>
<p>And by doing this magical ritual you will get rid of <strong>compilation errors</strong> caused by not excluding the aforementioned folders from your Database project - by doing which you will avoid <em>another set of problems</em>.</p>
<p>Just do it. You can change your setup later on your own if you’re not happy with it. Let’s first get things working.</p>
<h1 id="dealing-with-nuget">Dealing with NuGet</h1>
<p>The three packages you need to install from NuGet are:</p>
<p><code>Microsoft.EntityFrameworkCore.Sqlite</code>
<code>Microsoft.EntityFrameworkCore.Design</code>
<code>Microsoft.EntityFrameworkCore.Tools</code></p>
<p>You will need to add these to your <strong>Database</strong> project. You will likely not need them in your main project.</p>
<h1 id="lets-add-some-classes">Let’s add some classes</h1>
<p>We’re going to need some code to be able to do anything with the database.</p>
<h3 id="savegamemanifestcs">SaveGameManifest.cs</h3>
<p>You can arrange your projects how ever you like, but I recommend you create in the <strong>Database</strong> project a folder named <code>DatabaseSets</code>. This folder will hold your C# classes which essentially represent your database tables.</p>
<p>For fun let’s add <code>SaveGameManifest.cs</code> file in that folder which will represent the data in your table. It’s basically a schema or “entity”. It’s the stuff you want to store in the database.</p>
<pre><code class="language-cs">using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using Microsoft.EntityFrameworkCore;

namespace Database;

[Table(&quot;SaveGameManifest&quot;)] // Name of the table in the database for this class.
[PrimaryKey(nameof(DatabaseId))] // They key you can directly fetch the data with.
public sealed class SaveGameManifest {

    // The primary Guid based key to access this save game manifest.
    [Column(nameof(DatabaseId))] // The database column name.
    public Guid DatabaseId { get; set; } 

    // The name of the save game as inputted by user.
    [Column(nameof(SaveName)), MaxLength(128),] // EF Core doesn&#39;t like strings of unrestricted length.
    public string SaveName { get; set; } = string.Empty;

    // The date when the save game was last saved.
    [Column(nameof(LastSaved))]
    public DateTime LastSaved { get; set; } = DateTime.Now;

    // Required for database. Do not remove.
    public SaveGameManifest() {}

    public SaveGameManifest(Guid databaseId, string saveName) {
        DatabaseId = databaseId;
        SaveName = saveName;
    }
}
</code></pre>
<p>And that’s it. We decorated our class and properties with attributes which instruct EF Core what everything is, ie. how it should be saved in the database. SQLite database is basically just a fancy a big Excel sheet. <strong>Tables</strong> tell you what type of stuff is in there in general (they are kind like file system folders), and <strong>Columns</strong> tell you what should go in here, and <strong>rows</strong> of the columns contain the actual data, data, data and more data.</p>
<h3 id="databaseconnectioncs">DatabaseConnection.cs</h3>
<p>I like to name the <code>DbContext</code> class <code>DatabaseConnection</code>, it makes it easier for me to comprehend what is going on.</p>
<p>There are lots of ways you could set up this file, so don’t be mistaken that this is the only way or even necessarily a good way. This is the database noob way that I came up with, the way which made sense to me personally.</p>
<p>This class essentially represents your database / gives you access to everything.</p>
<p>So in my setup you would call <code>DatabaseConnection.Instance.SaveGameManifests</code>, for example, to gain access to the <code>SaveGameManifest</code> tables via the <code>DbSet</code>. And you might call <code>DatabaseConnection.Instance.SaveChanges()</code> to save the database after making changes, etc.</p>
<pre><code class="language-cs">using Database;
using Microsoft.EntityFrameworkCore;

namespace YourMainProjectNameSpace;

// We need to inherit DbContext. This allows us to connect to the database.
public sealed class DatabaseConnection : DbContext {

    // I set this up as a singleton. But you can do what ever you like.
    private static DatabaseConnection _instance;

    /*
        To be able to pass the user folder path to our database (where our database
        is saved) I created a Configure method which must be called before using
        the database for the first time. This is all about that.
        */
    private static bool _isConfigured = false;

    public static void Configure(string userFolder) {
        if (_instance == null) {
            _instance = new DatabaseConnection(userFolder);
            _isConfigured = true;
        }
    }

    public static DatabaseConnection Instance {
        get {
            if (!_isConfigured) throw new InvalidOperationException(&quot;DatabaseHandler is not configured. Call Configure() before accessing Instance.&quot;);
            return _instance;
        }
    }

    // These are used in setting up the paths.
    private string _userFolder;
    private string _databaseFolder = &quot;database&quot;;
    private string _databasePath = &quot;database.db&quot;;
    private string _fullDatabaseFilePath;

    /*
        DbSets contain essentially the tables of the database.
        You should probably have all your tables defined here in this class,
        Instead of trying to spread them around or anything like that. I hear it&#39;s
        a common practice, so it should be good enough for you too.
        So below here, in production code, would be a big list of DbSet&lt;T&gt;s.
        */ 
    public DbSet&lt;SaveGameManifest&gt; SaveGameManifests { get; set; }

    // Again, empty constructor is needed or everything fails to work.
    public DatabaseConnection() {}

    /*
        And here is the constructor that we use to build things up.
        Notice that we take in the user:// folder path here. But if you prefer
        an alternate method, do what ever you like.
        */
    public DatabaseConnection(string userFolder) {
        _userFolder = userFolder;

        // Console.WriteLine(&quot;Initializing DatabaseHandler.&quot;);

        // Generate the file paths.
        GeneratePaths();

        // Console.WriteLine(&quot;Database file paths generated.&quot;);

        // Attempt to create the database file if it doesn&#39;t exist yet.
        TryCreateDatabaseFile(_fullDatabaseFilePath);
    }

    /*
        This bit of code is needed to configure that we&#39;re using SQLite and set the path.
        Feel free to throw in more config options if you need them.
        */
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) {
        optionsBuilder.UseSqlite($&quot;Data Source={_fullDatabaseFilePath}&quot;);
    }


    private void GeneratePaths() {

        //Console.WriteLine(&quot;Generating database file paths.&quot;);

        // Get the full path to the database file.
        _fullDatabaseFilePath = Path.Combine(_userFolder, _databaseFolder, _databasePath);
    }

    /// &lt;summary&gt;
    /// If the database file does not exist, create it.
    /// &lt;/summary&gt;
    private static void TryCreateDatabaseFile(string fullDatabaseFilePath) {

        //Console.WriteLine(&quot;Trying to create the database file.&quot;);

        // If the database exists already, we don&#39;t need to create it.
        bool databaseExists = File.Exists(fullDatabaseFilePath);
        if (databaseExists) return;

        //Console.WriteLine(&quot;Database does not exist. Trying to create a new SQLite database file.&quot;);

        // Try to create the database folder first and then the database file.
        try {
            string fullFolderPath = Path.GetDirectoryName(fullDatabaseFilePath);
            Directory.CreateDirectory(fullFolderPath ?? throw new InvalidOperationException());
            File.Create(fullDatabaseFilePath).Close();
        } catch (Exception e) {
            Console.WriteLine(e);
            throw;
        }

        // Check if the database file exists. It should.
        if (!File.Exists(fullDatabaseFilePath)) {
            throw new Exception(&quot;Failed to create the database file.&quot;);
        }

        //Console.WriteLine(&quot;SQLite database file created successfully.&quot;);
    }
}
</code></pre>
<h3 id="maincs">Main.cs</h3>
<p>In our test this file resides in your main project - or where ever, but what I’m trying to say, it’s <em><strong>not</strong></em> in the <strong>Database</strong> project in this example.</p>
<p>The <code>Main.cs</code> represents some kind of controller or other class which does something practical with the database.</p>
<p>For our purposes we simply want to output something to see that everything works.</p>
<pre><code class="language-cs">
using Database;
using Godot;
using Microsoft.EntityFrameworkCore;
using YourMainProjectNamespace.Database; // (Unless you excluded the database folder)

namespace YourMainProjectNamespace;

// Oh yes, we&#39;re likely in Godot now doing something fun with the database.
public partial class Main : Node3D {

    /*
        In this example we store a reference to the connection, but normally you might
        just use a using block for the duration of the database operation you want
        to perform. You can do it both ways depending on the requirements.
        */
    private DatabaseConnection _databaseConnection;

    public override async void _Ready() {

        /*
                Configure the database connection. We need to run configure
                and pass the user data directory from Godot to the database
                class library before we can access the instance.
                (Simply because we happened to code it that way in this example.
                You do what you like. It doesn&#39;t matter.)
                */
        DatabaseConnection.Configure(OS.GetUserDataDir());
        _databaseConnection = DatabaseConnection.Instance;

        try {
            // Run migrate to create/update the database and tables if they don&#39;t exist/aren&#39;t up-to-date.
            await _databaseConnection.Database.MigrateAsync();
                        
                        // Now we can use the database after we&#39;ve run Migrate. Not before.

            // Add test data to the database so we have something to show.
            await AddTestDataEntriesAsync();

              // Do something for fun.
            await RunDatabaseTests();

        } catch (Exception e) {
            GD.PrintErr(e);
            throw;
        }
    }

    /// &lt;summary&gt;
    /// Add test data to the database.
    /// &lt;/summary&gt;
    private async Task AddTestDataEntriesAsync() {

        // Instantiate test data.
        SaveGameManifest saveGameManifest = new (Guid.NewGuid(), &quot;Test Save Game&quot;);

        // Add test data to database.
        await DatabaseConnection.Instance.AddAsync(saveGameManifest);

        // Save changes to database to disc.
        await DatabaseConnection.Instance.SaveChangesAsync();
    }

    /// &lt;summary&gt;
    /// Run database tests to see if it&#39;s working.
    /// &lt;/summary&gt;
    private async Task RunDatabaseTests() {

        // Get data from database and output it.
        Console.WriteLine(&quot;Fetching SaveGameManifests from database...&quot;);

        // Fetch all SaveGameManifest entries from the database table.
        DbSet&lt;SaveGameManifest&gt; results = DatabaseConnection.Instance.SaveGameManifests;

        // Output the results.

        Console.WriteLine(&quot;Results:&quot;);

        await foreach (SaveGameManifest manifest in results.AsAsyncEnumerable()) {
            Console.WriteLine($&quot;DatabaseId: {manifest.DatabaseId}, SaveName: {manifest.SaveName}, LastSaved: {manifest.LastSaved}&quot;);
        }

        Console.WriteLine($&quot;Results count: {results.Count()}&quot;);
    }
}
</code></pre>
<h1 id="database-tab">Database tab</h1>
<p>At this point you might like to, or need to, connect the database in the database tab in Rider. Among other things this will allow you to inspect the contents of the SQLite database, which can be very helpful in debugging.</p>
<h1 id="migrations">Migrations</h1>
<p>Now that we’re done with all of that, create a <code>Migrations</code> folder in the <strong>Database</strong> project.</p>
<p>Right click on the <code>Database</code> project in the Solution Explorer and there should be entry for <strong>Entity Framework Core</strong> near the top of the context menu that pops open.</p>
<p>Click <strong>Add Migration</strong>.</p>
<p>The name can be anything you like which helps you understand what the migration is.</p>
<p>Migration project and Startup project should be <code>Database</code>.</p>
<p>DbContext class should be <code>DatabaseConnection</code>.</p>
<p>The <code>Migrations</code> folder has to point to the <code>Migrations</code> folder you created.</p>
<p><code>Target Framework</code> should probably be set to the .NET version you’re using.</p>
<p>Everything else can be at defaults. Hit OK.</p>
<p>If all goes well you should see <code>DatabaseConnectionModelSnapshot.cs</code> file being generated and also a file called something like <code>20240702182449_Initial.Designer.cs</code>.</p>
<p>You should now have a fully functional setup ready for running.</p>
<h1 id="how-to-use-migrations">How to use migrations?</h1>
<p>Every time you’ve changed the schema, ie. your tables, columns, added new types, removed columns, tables, changed types, changed names, etc. In other words every time your data definitions change and your database types don’t anymore reflect your types in code, you should run <code>Entity Framework Core &gt; Add Migration</code>.</p>
<p>This will update the migration path of your data and tell your database how it should update and change between different versions.</p>
<h1 id="problems">Problems</h1>
<p>The database will be created in Godot’s <code>user://</code> folder. If you have trouble finding it you can open Godot and go to <code>Editor &gt; Open Editor Data Folder</code> and look it up from there.</p>
<p>You can always just delete the database file and delete the Migrations files when testing things. Don’t do that in production when you’ve released something. You should only add new migrations then, and never remove them, if they have already been released out to the wild.</p>
<p>Unless I forgot something or you’ve got a different kind of setup, these instructions should more or less work. I did not, however, specifically go out of my way to test these instructions step by step to insure that they work on a clean system. I wrote the instructions from memory. So there may be factual errors. If that’s the case, you can contact me on Star and Serpent’s Discord. The link is on Star and Serpent’s home page.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Bullet parenting trick</title>
        <author>
            <name>Pilvinen</name>
        </author>
        <link href="https://pilvimaa.fi/bullet-parenting-trick/"/>
        <id>https://pilvimaa.fi/bullet-parenting-trick/</id>
        <media:content url="https://pilvimaa.fi/media/posts/18/bullet_hell.png" medium="image" />
            <category term="Inheritance"/>
            <category term="Godot"/>

        <updated>2024-02-09T11:06:05+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://pilvimaa.fi/media/posts/18/bullet_hell.png" alt="" />
                    In Godot if you have a bullet parented to your player, obviously the bullets will move when the player moves. So you need a node outside of your player hierarchy&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://pilvimaa.fi/media/posts/18/bullet_hell.png" class="type:primaryImage" alt="" /></p>
                <p>In Godot if you have a bullet parented to your player, obviously the bullets will move when the player moves.</p>
<p>So you need a node outside of your player hierarchy to parent them to, eg. something like:</p>
<pre><code>- World
    - Bullets 
    - Player
    - EnemyA
    - EnemyB
</code></pre>
<p>This works fine, but can make controlling the bullets a chore due to required boiler plate code.</p>
<p>But… what if you don’t need to do that?</p>
<p>If you put a node of type <code>Node</code> inside your Player scene it will break the inheritance hierarchy because Node is such a simple type.</p>
<p>In that case you can have:</p>
<pre><code>- Player (Node2D)
  - Bullets (Node)
    - Bullet (Node2D)
    - Bullet (Node2D)
    - Bullet (Node2D)
    - Bullet (Node2D)
</code></pre>
<p>And with this the movement of <code>Player</code> won’t affect position of <code>Bullets</code> because the inheritance hierarchy doesn’t work between them.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>What to return when you don&#x27;t have anything to return?</title>
        <author>
            <name>Pilvinen</name>
        </author>
        <link href="https://pilvimaa.fi/what-to-return-when-you-dont-have-anything-to-return/"/>
        <id>https://pilvimaa.fi/what-to-return-when-you-dont-have-anything-to-return/</id>
        <media:content url="https://pilvimaa.fi/media/posts/17/nothing_to_return-2.png" medium="image" />

        <updated>2023-11-23T20:10:24+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://pilvimaa.fi/media/posts/17/nothing_to_return-2.png" alt="" />
                    Not finding your data that you are trying to fetch via Guid Id can be handled elegantly either as a case of domain error or just as a regular case&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://pilvimaa.fi/media/posts/17/nothing_to_return-2.png" class="type:primaryImage" alt="" /></p>
                <p>Not finding your data that you are trying to fetch via <code>Guid</code> <strong>Id</strong> can be handled elegantly either as a case of <strong>domain error</strong> or just as a <strong>regular case</strong> that you’re expecting to happen. We will only go in-depth with domain error in this article and do a quick overview on regular cases.</p>
<h2 id="domain-error">Domain error</h2>
<p>When fetching data we can handle domain errors with our own custom <code>Result</code> type which also includes an <strong>error</strong>.</p>
<p>But what is a “domain error”?</p>
<p>In software development, a “domain error” happens when there’s a mistake or issue because the rules or limitations of a particular area, or situation, that the software is designed for are not followed properly. For example, if the software is made to handle banking transactions but does something against banking rules, that’s a domain error.</p>
<p>If you’re working with a system where each entity is uniquely identified by a GUID (Globally Unique Identifier), not finding an entity by its GUID could indicate a more serious issue. This might be because the data doesn’t exist, it’s not accessible for some reason, or there’s an inconsistency in the data integrity.</p>
<p>In such scenarios, using a <code>Result</code> type that includes an <strong>error</strong> is beneficial. The Result type, commonly found in functional programming - and increasingly in other paradigms - is a way to encapsulate either a successful outcome (with the expected data) or an error (with details about what went wrong). This approach is more informative than simply returning <code>null</code> or an <strong>optional</strong> object because it provides explicit information about the nature of the error, which is critical for debugging and handling exceptional cases properly.</p>
<p>Handling a returned <code>Result</code> type without resorting to branching logic (like if or switch statements) often involves leveraging higher-order functions or patterns such as monadic binding. In C#, this can be achieved through extension methods that abstract away the branching logic. It’s still there, but hidden away for the most part. You don’t get the branching logic vomited all over your classes which should be focused on other things.</p>
<p>Let’s consider a hypothetical <code>Result&lt;T, E&gt;</code> type, where <code>T</code> is the type of the value in case of success, and <code>E</code> is the type of the error. We will define extension methods like <code>OnSuccess</code> and <code>OnError</code> to handle each case.</p>
<p>Here’s an example implementation:</p>
<pre><code class="language-csharp">public class Result&lt;T, E&gt; {  
    public T Value { get; private set; }  
    public E Error { get; private set; }  
    public bool HasValue { get; private set; }  
  
    // Constructors  
    public Result(T value) {  
        Error = default!; // Replace with what you want to do here
        Value = value;  
        HasValue = true;  
    }  
  
    public Result(E error) {  
        Error = error;  
        Value = default!; // Replace with what you want to do here 
        HasValue = false;  
    }  
}

public static class ResultExtensions {  
  
    // Extension method for success case.  
    public static Result&lt;T, E&gt; OnSuccess&lt;T, E&gt;(this Result&lt;T, E&gt; result, Action&lt;T&gt; action) {  
        if (result.HasValue) {  
            action(result.Value);  
        }  
        return result;  
    }  
  
    // Extension method for error case.  
    public static void OnError&lt;T, E&gt;(this Result&lt;T, E&gt; result, Action&lt;E&gt; action) {  
        bool errorHasOccurredHasNoValue = !result.HasValue;  
        if (errorHasOccurredHasNoValue) {  
            action(result.Error);  
        }  
    }  
  
}  

public sealed class ResultTypeTest {  
  
    private readonly Guid _correctId = Guid.NewGuid();  
    private readonly Guid _wrongId = Guid.NewGuid();  
  
    private readonly Database _database;  
  
    public ResultTypeTest() {  
        _database = new (_correctId);  
    }  
  
    public void Test() {  
  
        // Database has been set up with data that we should be able to fetch with _correctId,  
        // whereas _wrongId should return an error because data by that id does not exist.        Result&lt;SomeData, DomainError&gt; correctResult = GetData(_correctId);  
        Result&lt;SomeData, DomainError&gt; wrongResult = GetData(_wrongId);  
  
        correctResult.OnSuccess(data =&gt; {  
            // Do something with data  
            Console.WriteLine($&quot;DEBUG: correctResult: Data fetched successfully, data.Id: {data.Id}&quot;);  
        }).OnError(error =&gt; {  
            // Do something with error  
            Console.WriteLine($&quot;DEBUG: correctResult: Error fetching data, error message: {error.Message}&quot;);  
        });  
  
        wrongResult.OnSuccess(data =&gt; {  
            // Do something with data  
            Console.WriteLine($&quot;DEBUG: wrongResult: Data fetched successfully, data.Id: {data.Id}&quot;);  
        }).OnError(error =&gt; {  
            // Print error  
            Console.WriteLine($&quot;DEBUG: wrongResult: Error fetching data, error message: {error.Message}&quot;);  
        });  
  
    }  
  
    private Result&lt;SomeData, DomainError&gt; GetData(Guid id) {  
        bool dataExists = _database.CheckDataExists(id);  
  
        if (dataExists) {  
            return new Result&lt;SomeData, DomainError&gt;(_database.data);  
        }  
  
        return new Result&lt;SomeData, DomainError&gt;(new DomainError(&quot;Domain error: Data not found.&quot;));  
    }  
  
}  
  
  
public class Database {  
    public SomeData data { get; set; }  
    public Database(Guid id) {  
        data = new SomeData(id);  
    }  
  
    public bool CheckDataExists(Guid id) {  
        return id == data.Id;  
    }  
}  
  
public class SomeData {  
    public Guid Id { get; }  
    public SomeData(Guid id) {  
        Id = id;  
    }  
}  

public class DomainError {  
    public string Message { get; }  
    public DomainError(string message) {  
        Message = message;  
    }  
}
</code></pre>
<p>In this example, <code>GetData</code> returns a <code>Result&lt;SomeData, DomainError&gt;</code>. Depending on whether <code>GetData</code> succeeds or fails, either <code>HandleData</code> or <code>LogError</code> will be executed. The key here is that the <code>OnSuccess</code> and <code>OnError</code> methods encapsulate the branching logic, allowing for a more fluent and declarative style of programming.</p>
<p>The <code>data =&gt; HandleData(data)</code> is a lambda expression that represents an <code>Action&lt;T&gt;</code>. It’s a method taking <code>data</code> as a parameter and then calling <code>HandleData</code> with it. Similarly, <code>error =&gt; LogError(error)</code> is an <code>Action&lt;E&gt;</code>, handling the error case.</p>
<p>This approach is quite powerful as it separates the concerns of error handling from the main business logic, leading to cleaner and more maintainable code. You can further refine this pattern by adding more methods for chaining, like Map for transforming the result, Bind for monadic operations, etc. This makes the Result type a very flexible tool for robust error handling without resorting to traditional branching logic.</p>
<p>The provided code snippet demonstrated several programming techniques and concepts:</p>
<ol>
<li><p><strong>Encapsulation and Monadic Design Pattern</strong>: The <code>Result&lt;T, E&gt;</code> class demonstrates encapsulation by containing both success and error states along with their values. This approach, akin to a monadic design pattern, organizes state handling within a structured object, avoiding dispersed code management. While not a full monad, <code>Result</code> mimics monadic aspects by providing methods to process values or errors without manual state checks.</p>
</li>
<li><p><strong>Fluent Interface and Method Chaining</strong>: The <code>Result</code> class employs a fluent interface through method chaining. The methods <code>OnSuccess</code> and <code>OnError</code> return the <code>Result</code> object itself, allowing for chaining multiple methods in a single statement. This design enhances code readability and conciseness, characteristic of fluent interfaces.</p>
</li>
<li><p><strong>Delegation and Higher-Order Functions</strong>: <code>OnSuccess</code> and <code>OnError</code> serve as higher-order functions, taking <code>Action&lt;T&gt;</code> and <code>Action&lt;E&gt;</code> delegates as parameters. They exemplify delegation by passing execution based on the <code>Result</code> object’s state to these provided action functions. This pattern allows for flexible and dynamic handling of different execution scenarios.</p>
</li>
<li><p><strong>Lambda Expressions and Conditional Execution</strong>: Lambda expressions like <code>data =&gt; HandleData(data)</code> and <code>error =&gt; LogError(error)</code> in C# provide concise representations of anonymous methods. The implementation of <code>OnSuccess</code> and <code>OnError</code> involves conditional execution, determining action invocation based on the <code>Result</code> object’s success state, often utilizing these lambda expressions for inline logic definition.</p>
</li>
</ol>
<h2 id="regular-case">Regular case</h2>
<p>Default value such as Optional object can help to recover from not finding the Guid Id.</p>
<p>If the absence of data corresponding to a GUID is a regular occurrence and not indicative of a deeper issue, then using an optional object like <code>Option&lt;T&gt;</code> is a more appropriate approach. <code>Option&lt;T&gt;</code> is a container that either holds a value of type <code>T</code> (representing the presence of data) or is empty (representing the absence of data).</p>
<p>This approach is particularly useful in cases where the absence of data is a normal - an expected part of the application’s flow. For example if a user is searching for a record that doesn’t exist, it isn’t necessarily an error. It could also mean that the record hasn’t been created yet. By using <code>Option&lt;T&gt;</code>, you can handle these scenarios without resorting to <code>null</code> checks or throwing exceptions. It allows the calling code to handle the case of missing data, perhaps by taking alternative actions or providing a default value.</p>
<p>I won’t go into details about this. But <code>Option&lt;T&gt;</code> is available, for example, from the popular function library <code>LanguageExt</code>.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Godot Control node mouse input handling order</title>
        <author>
            <name>Pilvinen</name>
        </author>
        <link href="https://pilvimaa.fi/godot-control-node-mouse-input-handling-order/"/>
        <id>https://pilvimaa.fi/godot-control-node-mouse-input-handling-order/</id>
        <media:content url="https://pilvimaa.fi/media/posts/16/GodotMouseInput.jpeg" medium="image" />
            <category term="MouseFilter"/>
            <category term="Mouse"/>
            <category term="InputEvent"/>
            <category term="Godot"/>

        <updated>2023-11-01T21:12:20+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://pilvimaa.fi/media/posts/16/GodotMouseInput.jpeg" alt="" />
                    Godot mouse input handling is a source of lot of confusion. The basic idea is that Mouse Filter set to Ignore ignores the element. Stop processes the received event and&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://pilvimaa.fi/media/posts/16/GodotMouseInput.jpeg" class="type:primaryImage" alt="" /></p>
                <p>Godot mouse input handling is a source of lot of confusion.</p>
<p>The basic idea is that <strong>Mouse Filter</strong> set to <code>Ignore</code> ignores the element. <code>Stop</code> processes the received event and doesn’t pass it along. It stops there. While <code>Pass</code> handles the event but then passes it along so other nodes can process it.</p>
<p>Where most of the confusion happens is trying to figure out in what order the mouse input events get processed.</p>
<p>Godot handles the input in nodes in reverse depth-first order.</p>
<p>In other words the order is:</p>
<ol>
<li>Bottom to top (ie. reverse)</li>
<li>Children first (ie. depth).</li>
</ol>
<h1 id="tree-order-example">Tree order example</h1>
<pre><code>- Last
    - Sixth
        - Fifth
    - Fourth
        - Third
            - Second
            - First
</code></pre>
<p>One of the more important things to understand is that <em><strong>sibling nodes DO NOT react to Mouse Filter being set to <code>Pass</code>!!!</strong></em></p>
<p>When a node is <code>Pass</code>ing event forward it <strong>ONLY</strong> passes it to its direct parent.</p>
<p>And of course only elements affected by the mouse clicking - or other mouse input events - are processed in the first place. You can’t <code>Pass</code> event forward to something that wouldn’t receive an event to begin with!</p>
<h1 id="using-pass-an-example">Using Pass, an example</h1>
<p>Let’s assume a situation where we have a button that we want to press, and we also want to detect when the mouse enters and leaves the window - we use the <code>MouseEntered</code> and <code>MouseExited</code> events set up for that and the detection element covers the whole screen. OK, so.</p>
<p>This doesn’t work:</p>
<pre><code>- SceneRoot (Control)
    - Button (Texturebutton)
    - MouseDetectionElement (Control)
</code></pre>
<p>Why? </p>
<p>Because in this case <code>MouseDetectionElement</code> will block clicks to <code>Button</code> if it has its <code>MouseFilter</code> set to <code>Stop</code> and <code>Pass</code>.  And if it’s set to <code>Ignore</code> then it’s just inactive and doesn’t perform the function we would like it to do.</p>
<p>This won’t improve the situation:</p>
<pre><code>- SceneRoot (Control)
     - MouseDetectionElement (Control)
    - Button (Texturebutton)
</code></pre>
<p>Now we can click the <code>Button</code>, but <code>MouseDetectionElement</code> will generate erroneous mouse entered and mouse exited events whether it’s set to <code>Pass</code> or <code>Stop</code> because when the mouse moves over the <code>Button</code>, it is counted as exiting/entering the <code>MouseDetectionElement</code>. It’s not what we want here.</p>
<p>The correct solution is to make the <code>MouseDetectionElement</code> part of the hierarchy so that the <code>Button</code> can <code>Pass</code> the events forward to its parent, the <code>MouseDetectionElement</code>:</p>
<pre><code>- SceneRoot (Control)
     - MouseDetectionElement (Control)
        - Button (Texturebutton)
</code></pre>
<p>Here <code>Button</code> is processed first and with its <strong>Mouse Filter</strong> is set to <code>Pass</code> it will both:</p>
<ol>
<li>Process the mouse events </li>
<li>and pass them along to its parent, the <code>MouseDetectionElement</code>.</li>
</ol>
<p>The <code>MouseDetectionElement</code> can then on its turn handle all the events correctly.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>GDScript vs. C# in Godot: Which language should you use?</title>
        <author>
            <name>Pilvinen</name>
        </author>
        <link href="https://pilvimaa.fi/gdscript-vs-c-in-godot-which-language-should-you-use/"/>
        <id>https://pilvimaa.fi/gdscript-vs-c-in-godot-which-language-should-you-use/</id>
        <media:content url="https://pilvimaa.fi/media/posts/15/csharp_vs_gdscript_godot.png" medium="image" />
            <category term="gdscript"/>
            <category term="Godot"/>
            <category term="C#"/>

        <updated>2023-10-16T19:18:04+03:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://pilvimaa.fi/media/posts/15/csharp_vs_gdscript_godot.png" alt="Confusing schematics" />
                    Godot is a powerful and versatile game engine that supports two scripting languages: GDScript and C#. Both languages have their own advantages and disadvantages, so it’s important to choose the&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://pilvimaa.fi/media/posts/15/csharp_vs_gdscript_godot.png" class="type:primaryImage" alt="Confusing schematics" /></p>
                <p>Godot is a powerful and versatile game engine that supports two scripting languages: GDScript and C#. Both languages have their own advantages and disadvantages, so it’s important to choose the one that’s right for you.</p>
<h1 id="official-support">Official support</h1>
<p>Both GDScript and C# are officially supported by the Godot team. This means that both languages have equal access to the Godot API and documentation.</p>
<h1 id="popularity">Popularity</h1>
<p>GDScript is by far the more popular language in Godot. It’s supported by a large community of developers. C#, on the other hand, is a newer addition to Godot, but it’s quickly gaining popularity, especially among developers who are already familiar with the language.</p>
<h1 id="tutorials-and-resources">Tutorials and resources</h1>
<p>There are more tutorials and resources available for GDScript than for C#. This is because GDScript has been around for longer, and it’s the default language for Godot. However, the C# community is growing rapidly, and more tutorials and resources are becoming available all the time.</p>
<h1 id="your-existing-skills-matter">Your existing skills matter</h1>
<p>Your existing skill set and personal preferences are the most important factors to consider when choosing between GDScript and C#. </p>
<p>If you’re already familiar with C#, or if you have experience with other statically typed languages, then C# will be a more natural choice for you. You’ll be able to get started quickly, and you’ll be able to leverage your existing knowledge and skills.</p>
<p>On the other hand, if you’re new to programming, or if you have experience with dynamically typed languages like Python, then GDScript may be a better choice for you. GDScript is easier to learn, and it has a more forgiving syntax.</p>
<h1 id="ease-of-prototyping">Ease of prototyping</h1>
<p>GDScript is generally considered to be easier to prototype with than C#. This is because GDScript has a more relaxed syntax, and it doesn’t require as much boilerplate code. C#, on the other hand, is a more statically typed language, which can make it more difficult to prototype quickly.</p>
<h1 id="applicability-beyond-godot">Applicability beyond Godot</h1>
<p>C# is a more widely applicable language than GDScript. C# is the primary language used in the Unity game engine, and it’s also used in a variety of other game development tools and libraries. GDScript, on the other hand, is specific to the Godot game engine.</p>
<h1 id="syntax-and-style">Syntax and style</h1>
<p>GDScript is a Python-like language, with a simple and easy-to-read syntax. C#, on the other hand, is a more verbose language with a more traditional C-style syntax.</p>
<h1 id="type-safety">Type safety</h1>
<p>GDScript has a level of optional type safety. This means that you can choose to use type hints to make your code more type-safe, but it’s not required. C#, on the other hand, is a statically typed language, which means that all variables and expressions must have explicitly defined types.</p>
<h1 id="static-vs-dynamic-typing">Static vs. dynamic typing</h1>
<p>Static typing can help to prevent errors and make your code more maintainable. However, it can also make your code more verbose and difficult to prototype with. Dynamic typing, on the other hand, can make your code more concise and easier to prototype with, but it can also lead to more errors.</p>
<h1 id="ides">IDEs</h1>
<p>C# has several professional IDEs available, such as Rider, Visual Studio and Visual Studio Code. GDScript, on the other hand, doesn’t have any dedicated IDEs. However, GDScript can be used with any text editor, and there are several plugins available that provide IDE-like features, such as syntax highlighting, code completion, and debugging.</p>
<h1 id="ecosystem">Ecosystem</h1>
<p>The .NET ecosystem is massive in comparison to the GDScript ecosystem. This means that there are a lot more libraries and tools available for C# developers.</p>
<h1 id="debugging">Debugging</h1>
<p>It’s generally easier to get hard to fix runtime bugs in GDScript than in C#. This is because GDScript is dynamically typed, so you can inspect and modify variables at runtime. C#, on the other hand, is statically typed, so it can be more difficult to debug runtime errors.</p>
<h1 id="using-both-gdscript-and-csharp">Using both GDScript and Csharp</h1>
<p>It is possible to use both C# and GDScript in the same Godot project (but definitely not required). This can be useful for a variety of reasons, such as:</p>
<p>You could leverage the strengths of both languages. For example, you could use C# (or even C++) for performance-critical code, and GDScript for prototyping and scripting simple game mechanics.</p>
<p>However, there are also some potential drawbacks to using both C# and GDScript in the same project:</p>
<p>It can be more difficult to maintain a project that uses multiple languages. This is because you need to be aware of the differences between the two languages, and you need to make sure that your code is compatible with both languages.</p>
<p>It can be more difficult to debug a project that uses multiple languages. This is because you need to be able to debug code written in both languages.</p>
<h2 id="language-interoperability">Language interoperability</h2>
<p>C# code within a Godot project can be difficult to remove once it is introduced. This is because GDscript calling into C# is good, idiomatic GDscript. However, C# calling into GDscript is bad C#, as it requires referencing functions by string. This can make your code more difficult to maintain and debug.</p>
<p>In other words, once you start using C# code in your Godot project, it can be difficult to go back. This is because GDscript is designed to make it easy to call C# code, but C# is not designed to make it easy to call GDscript code.</p>
<p>If you are considering using multiple languages in your Godot project, I recommend that you think carefully about whether or not you need to use C#. If you do need to use C#, try to limit the amount of code that you call.</p>
<h1 id="performance">Performance</h1>
<p>A lot of new developers coming to Godot often worry about performance, so let’s talk about that for a bit.</p>
<h2 id="gdscript-vs-csharp-speed">GDScript vs. Csharp speed</h2>
<p>C# is generally faster than GDScript, but this is not true in all circumstances and all situations.</p>
<p>Marshalling can add overhead to C# code, especially when calling native Godot functions.</p>
<p>Marshalling is the process of converting data between different programming languages. Godot is written in C++. When you call a native Godot function from C#, the .NET runtime needs to marshal the data between the two languages. This can add overhead to your code, especially if you’re calling native functions frequently.</p>
<p>GDScript, on the other hand, doesn’t need to marshal data when calling native Godot functions. This is because GDScript is built on top of the Godot engine, and it has direct access to the Godot API.</p>
<p>As a result, GDScript code can sometimes be faster than C# code, especially when calling native Godot functions frequently.</p>
<h2 id="does-it-really-matter">Does it really matter</h2>
<p>If you’re developing a performance-critical game, then C# may be a better choice. </p>
<p>But for most games, the difference in performance between GDScript and C# will be negligible.</p>
<p>You can always write performance critical parts of your game in C++ if you find it necessary. It’s always an option whether you choose GDScript or C#.</p>
<p>About  marshalling specifically, you can avoid any major problems simply by being mindful of the fact that marshalling happens and avoiding excessive and unnecessary back and forth between C# and Godot.</p>
<p>Marshalling overhead is typically only significant in performance-critical applications, and you’re likely to hit other more critical bottle necks way before that happens. </p>
<p>Know the scale of your game, know your skillset, know your personal preferences. There are a lot of things to consider when choosing a language and performance is only one of those.</p>
<h1 id="final-words">Final words</h1>
<p>If you’re new to game development, or if you’re looking for a language that is easy to prototype with, or you’re already familiar with Python then GDScript is a good choice.</p>
<p>If you’re already familiar with C#, or if you need a language with better performance or a wider ecosystem, then C# is a good choice.</p>
<p>Ultimately it comes down to personal preference.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Node2D double click detection in Godot</title>
        <author>
            <name>Pilvinen</name>
        </author>
        <link href="https://pilvimaa.fi/node2d-double-click-detection-in-godot/"/>
        <id>https://pilvimaa.fi/node2d-double-click-detection-in-godot/</id>
        <media:content url="https://pilvimaa.fi/media/posts/14/computer_mice_double_click.png" medium="image" />
            <category term="InputEvent"/>
            <category term="Input"/>
            <category term="Godot"/>
            <category term="Csharp"/>
            <category term="C#"/>

        <updated>2023-06-14T02:08:31+03:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://pilvimaa.fi/media/posts/14/computer_mice_double_click.png" alt="Two mice using a computer mouse" />
                    Clicks for Node2D based nodes can easily be detected by using CollisionObject2D‘s input_event signal. To capture the mouse clicks we can add an Area2D node and a CollisionShape2D or CollisionPolygon2D&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://pilvimaa.fi/media/posts/14/computer_mice_double_click.png" class="type:primaryImage" alt="Two mice using a computer mouse" /></p>
                <p>Clicks for <code>Node2D</code>  based nodes can easily be detected by using <code>CollisionObject2D</code>‘s <code>input_event</code> signal.</p>
<p>To capture the mouse clicks we can add an <code>Area2D</code> node and a <code>CollisionShape2D</code> or <code>CollisionPolygon2D</code> as its child node. </p>
<p>Since we are using <code>CollisionObject2D</code>‘s <code>input_event</code> signal directly the <code>Area2D</code>‘s <code>Monitoring</code> and <code>Monitorable</code> won’t be used and we can disable those.</p>
<p><code>Area2D</code>‘s ‘<code>Collision &gt; Layer</code> needs to be set to some value or the clicks won’t be detected.</p>
<p>The <code>Area2D</code> node also needs to have <code>Input &gt; Pickable</code> set to <code>True</code>.</p>
<p>Give the <code>CollisionShape2D</code> a <code>Shape</code>, eg. <code>RectangleShape2D</code>, <code>CircleShape2D</code>, <code>CapsuleShape2D</code>, etc. and set its <code>Size</code> to the dimensions you want. This defines the area’s size and shape that can be clicked with the mouse. </p>
<p>Finally set the <code>CollisionShape2D</code>‘s <code>Transform &gt; Position</code> to the location where you want it.</p>
<p>Now we can add a script to the <code>Area2D</code> node and in <code>Area2D</code>‘s <code>Node &gt; Signals</code> connect the <code>input_event</code> to the script.</p>
<p>See example below.</p>
<pre><code class="language-cs">public void OnContainerBeingClicked(Node viewport, InputEvent @event, int shapeIdx) {  
  
    // Return if not mouse left button double click.  
    if (@event is not InputEventMouseButton mouseButtonEvent) return;  
    if (!mouseButtonEvent.Pressed) return;  
    if (mouseButtonEvent.ButtonIndex != MouseButton.Left) return;  
    if (!mouseButtonEvent.DoubleClick) return;  
  
    ToggleContainer();  
}
</code></pre>
<p>The code is pretty self-explanatory, but let’s break it down.</p>
<p>In the method signature we need to return <code>void</code>, and accept <code>Node</code>, <code>InputEvent</code>, and <code>int</code> as parameters - even if we don’t use them all. It’s simply required to connect the signal.</p>
<p>Since <code>event</code> is a reserved keyword we are required to place <code>@</code> in front of it if we want to use that particular name in our parameters, ie. <code>@event</code> instead of <code>event</code>. But we might as well use any other name such as <code>inputEvent</code> if it strikes your fancy - it really doesn’t matter. The parameter names can be what ever you want as long as the types match <code>Node</code>, <code>InputEvent</code> and <code>int</code>. The signal will still work.</p>
<p>We cannot directly handle <code>InputEventMouseButton</code>, so we need to use <code>InputEvent</code>  instead and cast it to <code>InputEventMouseButton</code>:</p>
<pre><code class="language-cs">if (@event is not InputEventMouseButton mouseButtonEvent) return;  
</code></pre>
<p>Here we check whether <code>@event</code> is or isn’t <code>InputEventMouseButton</code>. If it’s not we simply return and do nothing further with that particular input event - someone else can handle that one, what ever it is.</p>
<p>If the <code>@event</code> is <code>InputEventMouseButton</code> we cast it as <code>InputEventMouseButton</code> and expose the cast as a local variable called <code>mouseButtonEvent</code> and continue executing our code. We can now access the <code>InputEventMouseButton</code> mouse button event via <code>mouseButtonEvent</code> and do further things.</p>
<pre><code class="language-cs">if (!mouseButtonEvent.Pressed) return;
</code></pre>
<p>Here we immediately put it to use and check if the mouse button is not being pressed (ie. it’s likely being released instead), we will simply return and call it quits there - it’s not our concern.</p>
<pre><code class="language-cs">if (mouseButtonEvent.ButtonIndex != MouseButton.Left) return;
</code></pre>
<p>We still don’t know what kind of mouse button press this was, so we can check by using the <code>ButtonIndex</code> whether it was something else than a <strong>left</strong> mouse button press - in which case we simply return and call it quits again. It’s not our concern, since in this example we want to handle left mouse buttons clicks only.</p>
<pre><code class="language-csharp">if (!mouseButtonEvent.DoubleClick) return;
</code></pre>
<p>Finally we have a very handy way of checking whether a double click happened without having to deal with timers and special logic each time - we can simply check the <code>DoubleClick</code> property. Godot will expose to us automatically the information whether it was a double click or not. If it’s not a double click, again, we return and call it quits there.</p>
<p>Now we’ve determined:</p>
<ol>
<li>It is a mouse button event.</li>
<li>It is a mouse button being pressed down event.</li>
<li>It is a left mouse button event.</li>
<li>It is a double click</li>
</ol>
<p>So we know the user did a left mouse button double click, so we can now do what ever we want with that information.</p>
<pre><code class="language-csharp">ToggleContainer();
</code></pre>
<p>In the above example what we do is we call our own custom <code>ToggleContainer()</code> method which opens - or closes - an inventory container window for us.</p>
<p>But you can call your own methods or do what ever you want once you’ve ruled out all the cases you don’t want to react to like we did above one step at a time.</p>
<p>You can also combine the if-statements if you like. We have kept them separate in the example for additional clarity and readability.</p>
<p>But you might also do this:</p>
<pre><code class="language-csharp">if (@event is not InputEventMouseButton mouseButtonEvent  
    || !mouseButtonEvent.Pressed  
    || mouseButtonEvent.ButtonIndex != MouseButton.Left  
    || !mouseButtonEvent.DoubleClick) {  
    return;  
}
</code></pre>
<p>The IL code produced by either of these examples is slightly different, but not meaningfully so.</p>
<p>It’s also worth noting that when using <code>return</code>s, like in the first example, the stack traces can be more meaningful when tracking down problems.</p>
<p>But generally the second example would execute faster. But this would be in the realm of nano optimizations and might be made a moot point anyway by future updates to the runtime.</p>
<p>It’s also worth noting that in Godot 4 you can implicitly cast the <code>Node</code> by accepting <code>Viewport</code> instead of <code>Node</code> in the signal’s method signature as a parameter - and it will still work because <code>Viewport</code> is a child of <code>Node</code>.</p>
<p>So if you want to handle the input, for example, so it doesn’t propagate any further - and you don’t want to cast the <code>Node</code> in your code explicitly to <code>Viewport</code> which you need to access the <code>SetInputAsHandled()</code> method, you can accept a <code>Viewport</code> directly instead of <code>Node</code> which is declared in the <code>input_event</code> signal’s signature.</p>
<p>Eg.</p>
<pre><code class="language-csharp">public void OnContainerBeingClicked(Viewport viewport, InputEvent @event, int shapeIdx) {  
  
    // Return if not mouse left button double click.  
    if (@event is not InputEventMouseButton mouseButtonEvent) return;  
    if (!mouseButtonEvent.Pressed) return;  
    if (mouseButtonEvent.ButtonIndex != MouseButton.Left) return;  
    if (!mouseButtonEvent.DoubleClick) return;  
      
    viewport.SetInputAsHandled();  
    ToggleContainer();  
}
</code></pre>
<p>This will also work. Otherwise we would have to:</p>
<pre><code class="language-csharp">public void OnContainerBeingClicked(Node viewport, InputEvent @event, int shapeIdx) {  
  
    // Return if not mouse left button double click.  
    if (@event is not InputEventMouseButton mouseButtonEvent) return;  
    if (!mouseButtonEvent.Pressed) return;  
    if (mouseButtonEvent.ButtonIndex != MouseButton.Left) return;  
    if (!mouseButtonEvent.DoubleClick) return;  
      
    ((Viewport)viewport).SetInputAsHandled();  
    ToggleContainer();  
}
</code></pre>
<p>That’s mostly it for handling mouse double clicks in Node2D nodes.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Implicit and explicit conversion operators</title>
        <author>
            <name>Pilvinen</name>
        </author>
        <link href="https://pilvimaa.fi/implicit-and-explicit-conversion-operators/"/>
        <id>https://pilvimaa.fi/implicit-and-explicit-conversion-operators/</id>
        <media:content url="https://pilvimaa.fi/media/posts/13/Spaghetti.jpg" medium="image" />
            <category term="Implicit"/>
            <category term="Explicit"/>
            <category term="Conversion"/>
            <category term="C#"/>

        <updated>2022-07-30T10:25:33+03:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://pilvimaa.fi/media/posts/13/Spaghetti.jpg" alt="" />
                    Implicit and explicit conversion operators allow you to ingegrate your custom types seamlessly with other types by doing implicit or explicit conversions from one type to another. public void SetPositionFromVector3(Vector3&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://pilvimaa.fi/media/posts/13/Spaghetti.jpg" class="type:primaryImage" alt="" /></p>
                <p>Implicit and explicit conversion operators allow you to ingegrate your custom types seamlessly with other types by doing implicit or explicit conversions from one type to another.</p>
<pre><code class="language-cs">    public void SetPositionFromVector3(Vector3 vector) {
        // Do stuff.
    }

    MyType myType = new MyType(0,0,0);
    SetPositionFromVector3(myType); // Argument type &#39;MyType&#39; is not assignable to parameter type &#39;Vector3&#39;
</code></pre>
<p>If you’ve ever experienced one of those situations where you have your awesome custom type <code>MyType</code> which is essentially a <code>Vector3</code>, or what ever, with some extra spices that you really need … but now you can’t pass it to anything that really wants a <code>Vector3</code>. And you end up doing all kinds of weird things like exposing a special property or using inheritance and polymorphism to get it working… </p>
<p>Do not fret! We’ll have none of those shenanigans. <code>implicit</code> and <code>explicit</code> conversion operators to the rescue!</p>
<p>Let’s look at a simplification of how <code>implicit</code> operator is used.</p>
<pre><code class="language-cs">class MyType {
    private Vector3 _myValue;
    public float x =&gt; _myValue.x;
    public float y =&gt; _myValue.x;
    public float z =&gt; _myValue.x;
    public static implicit operator Vector3(MyType myType) =&gt; _myvalue;
    //  ^    ^       ^        ^       ^        ^-- Input type    ^-- Return value
    //  |    |       |        |       `-- Output type
    //  `----`-------`--------`-- Magical keywords
}
</code></pre>
<p>That’s how you get it working. But lets examine this declaration word by word and break it apart.</p>
<p>All the operators have to be declared <code>public</code> and they also have to be <code>static</code>.  Next we declare the <code>implicit</code> or <code>explicit</code> keyword. What <code>implicit</code> means is basically “Don’t ask stupid questions, just do the conversion for me - <em>implicitly</em>, automatically, ie. it is <em>implied</em>.” (The <code>explicit</code> keyword will be explained further down below). Next up we have to use the <code>operator</code> keyword which allows overloading existing C# operators. Then we have <code>Vector3</code> as the type which we overload, ie. essentially our “return type” if you allow such a simplification. In the parameters we have the type we are converting from. In our function body we define how the correct value gets returned. In this example we simply return the value from the private field <code>_myValue</code>.</p>
<p>The <code>explicit</code> keyword works in pretty much the same way as the <code>implicit</code> keyword, except you have to do the casting yourself, <em>explicitly</em>, when you use it, eg.</p>
<pre><code class="language-cs">    MyType myType = new MyType(0,0,0);
    SetPositionFromVector3((Vector3) myType); // explicit casting is required with explicit keyword.
</code></pre>
<p>Instead of implicitly as shown below.</p>
<pre><code class="language-cs">    MyType myType = new MyType(0,0,0);
    SetPositionFromVector3(myType); // with implicit keyword casting is done automatically.
</code></pre>
<p>NOTE: If you decide to use the <code>implicit</code> keyword, you have to be careful because it will be less obvious what is going on in the code.</p>
<p>To do the conversion the other way around, ie. in our example from <code>Vector3</code> to <code>MyType</code>, we can simply switch the places of the types and make sure somehow that the correct type and values are returned.</p>
<pre><code class="language-cs">class MyType {
    private Vector3 _myValue;
    // This is what we did before.
    public static implicit operator Vector3(MyType myType) =&gt; _myvalue;
    // Here we switched things around.
    public static implicit operator MyType(Vector3 myType) =&gt; new Vector3(myType.x, myType.z, myType.z);
}
</code></pre>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Unit testing private methods through extraction</title>
        <author>
            <name>Pilvinen</name>
        </author>
        <link href="https://pilvimaa.fi/unit-testing-private-methods-through-extraction/"/>
        <id>https://pilvimaa.fi/unit-testing-private-methods-through-extraction/</id>
        <media:content url="https://pilvimaa.fi/media/posts/12/Bugs.jpg" medium="image" />
            <category term="Unit Testing"/>
            <category term="C#"/>

        <updated>2022-07-24T14:43:32+03:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://pilvimaa.fi/media/posts/12/Bugs.jpg" alt="" />
                    When you use unit tests you have to intentionally write code that is testable. What about private methods? How do you test those? And no, you should NOT change the&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://pilvimaa.fi/media/posts/12/Bugs.jpg" class="type:primaryImage" alt="" /></p>
                <p>When you use unit tests you have to <em><strong>intentionally</strong></em> write code that is testable.</p>
<p>What about <code>private</code> methods? How do you test those?</p>
<p>And no, you <em><strong>should NOT</strong></em> change the accessibility of your methods (eg. <code>internal</code>, <code>public</code>, etc.) to make your code testable as you would lose your code’s correctness - there’s a reason why those <code>private</code> methods have been made <code>private</code>!</p>
<p>There are several ways to approach this problem. For example you could use the <code>PrivateObject</code> class. Or you could use <strong>reflection</strong>. </p>
<p>In this article, however, we are going to take a look at using <strong>extraction</strong> and good coding practices to make our <code>private</code> methods more accessible while also retaining our code’s correctness.</p>
<p>Let’s assume a situation where</p>
<pre><code class="language-cs">public class Player {
    
    private void Attack() {
        System.Console.WriteLine(&quot;Enemy takes damage!&quot;);
    }
    
    private void Move() {
        System.Console.WriteLine(&quot;You moved!&quot;);
    }
    
    public override void _PhysicsProcess(float delta) {
        Attack();
        Move();
    }
    
}
</code></pre>
<p>You can’t test the above methods, <code>Attack()</code> and <code>Move()</code>, because they are <code>private</code> and not exposed to the outside world. But you also want to keep it that way, it’s an important requirement.</p>
<p>Making the methods <code>public</code> would be bad. Using reflection to test the methods would work, but it’s not fun nor a good approach in general.</p>
<p>Let’s use <strong>method extraction</strong> instead and turn those methods into <strong>abstractions</strong>.</p>
<pre><code class="language-cs">public class RefactoredPlayer {
    private Attacker attacker;
    private Mover mover;

    public override void _PhysicsProcess(float delta) {
        attacker.Attack();
        mover.Move();
    }
}
</code></pre>
<p>What we’ve done here is we’ve refactored the <code>Player</code> class and extracted the <code>Attack()</code> and <code>Move()</code> methods into their own classes, <code>Attacker</code> and <code>Mover</code>. Now the <code>RefactoredPlayer</code> describes only the <em>flow of the code</em> and not it’s <em>implementation</em>, thus allowing us to keep the composed <code>attacker</code> and <code>mover</code> objects in the <code>RefactoredPlayer</code> class <code>private</code> while exposing the abstractions as <code>public</code> (see below).</p>
<pre><code class="language-cs">public abstract class Attacker {
    public abstract void Attack();
}

public abstract class Mover {
    public abstract void Move();
}
</code></pre>
<p><strong>IMPORTANT:</strong> We don’t have to test the <code>RefactoredPlayer</code> class anymore, we can now test the <em><strong>actual implementations</strong></em> of <code>Attacker</code> and <code>Mover</code> or the <em><strong>abstract classes</strong></em> themselves (for that you need to make an anonymous class implementation of your abstract class as you can’t instantiate an abstract class). Which one you want to do depends mostly on whether your actual implementations have extra features beyond the promises made in the <code>abstract</code> classes or not.</p>
<p>As a bonus you can now have several implementations of <code>Attacker</code> and <code>Mover</code> and depend upon <strong>abstractions</strong> instead of concrete implementations giving your <code>RefactoredPlayer</code> class less reasons to change and your code becomes more flexible.</p>
<pre><code class="language-cs">public class SwordAttack : Attacker {
    public override void Attack() {
        System.Console.WriteLine(&quot;You skewer the enemy with your sword!&quot;);
    }
}
</code></pre>
<p>Here we have an example of an actual implementation of one of our abstract classes. We would still want to depend upon the abstraction <code>Attacker</code> rather than the implementation <code>SwordAttack</code> - to make our code more fluid and easier to change. This way we don’t have to change our <code>RefactoredPlayer</code> class if our implementation changes or gets swapped out to something else that is also implementing the <code>abstract</code> class <code>Attacker</code>.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Getting GodotXUnit up and Running with Rider</title>
        <author>
            <name>Pilvinen</name>
        </author>
        <link href="https://pilvimaa.fi/getting-godotxunit-up-and-running-with-rider/"/>
        <id>https://pilvimaa.fi/getting-godotxunit-up-and-running-with-rider/</id>
        <media:content url="https://pilvimaa.fi/media/posts/11/Test.jpg" medium="image" />
            <category term="XUnit"/>
            <category term="Unit Testing"/>
            <category term="GodotXUnit"/>
            <category term="Godot"/>
            <category term="C#"/>

        <updated>2022-07-18T17:54:14+03:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://pilvimaa.fi/media/posts/11/Test.jpg" alt="" />
                    Installation from Github These instructions will explain how to get GodotXUnit integrated to your project and working with Rider. [XunitTestCaseDiscoverer(&quot;GodotXUnitApi.Internal.GodotFactDiscoverer&quot;, &quot;GodotXUnitApi&quot;)] And replace the GodotXUnitApi with your project’s assembly name,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://pilvimaa.fi/media/posts/11/Test.jpg" class="type:primaryImage" alt="" /></p>
                <h2 id="installation-from-github">Installation from Github</h2>
<p>These instructions will explain how to get GodotXUnit integrated to your project and working with Rider.</p>
<ol>
<li>Clone the <code>Master</code> branch of the GodotXUnit project in some temporary folder:
<code>git clone https://github.com/fledware/GodotXUnit.git</code></li>
<li>From the freshly cloned project, copy the contents of the <code>addons</code> folder into your project’s <code>addons</code> folder - or if that doesn’t exist yet then simply copy the whole <code>addons</code> folder itself to your Godot project’s root. After doing this you  can delete the rest of the files from the cloned project, you don’t need them.</li>
<li>Delete any <code>.csproj</code> files you can find under <code>addons/GodotXUnit</code> and its sub-folders. At the time of writing this there should be only one <code>.csproj</code> located at <code>addons/GodotXUnit/GodotXUnitApi/GodotXUnitApi.csproj</code>. Delete it. With this installation method the GodotXUnit will become a part of your own project, so there’s no need to have any other <code>.csproj</code> files lying around.</li>
<li>In the file <code>addons/GodotXUnit/GodotXUnitApi/GodotFactAttribute.cs</code> find a line that says:</li>
</ol>
<pre><code class="language-xml">[XunitTestCaseDiscoverer(&quot;GodotXUnitApi.Internal.GodotFactDiscoverer&quot;, &quot;GodotXUnitApi&quot;)]
</code></pre>
<p>And replace the <code>GodotXUnitApi</code> with your project’s assembly name, eg.</p>
<pre><code class="language-xml">[XunitTestCaseDiscoverer(&quot;GodotXUnitApi.Internal.GodotFactDiscoverer&quot;, &quot;MyAwesomeGodotProject&quot;)]
</code></pre>
<p>You have to do this because GodotXUnit will scan your project for test cases and it needs to know the assembly to scan. If you <em><strong>don’t</strong></em> do this GodotXUnit will not find your test cases. </p>
<ol start="6">
<li>Add these dependencies to your project’s <code>.csproj</code></li>
</ol>
<pre><code class="language-xml">&lt;ItemGroup&gt;
    &lt;PackageReference Include=&quot;Newtonsoft.Json&quot; Version=&quot;12.0.3&quot; /&gt;
    &lt;PackageReference Include=&quot;xunit&quot; Version=&quot;2.4.1&quot; /&gt;
    &lt;PackageReference Include=&quot;xunit.runner.utility&quot; Version=&quot;2.4.1&quot; /&gt;
&lt;/ItemGroup&gt;
</code></pre>
<p>Now you should be good to go.</p>
<h2 id="running-the-tests">Running the tests</h2>
<p>Annotate your tests with <code>[GodotFact]</code> and they should work directly from Rider.</p>
<p>If you want to write anything that uses the <strong>Godot Engine</strong>, make sure you make a <strong>base class</strong> for these tests and annotate it with a <strong>Collection attribute</strong>, as shown in the example below.</p>
<pre><code class="language-cs">// super important - this prevents the tests from running in parallel.
// if they would run in parallel, they would interfere with each other.
[Collection(&quot;Integration Tests&quot;)] public abstract class BaseTest : IAsyncLifetime
</code></pre>
<p>And when <strong>waiting</strong> for things:</p>
<pre><code class="language-cs">
// Then within 5 seconds the player should be dead because
// the monster will attack the player.
    await GetTree().WithinSeconds(5, () =&gt; {
        // This assertion will be repeatedly run every frame
        // until it either succeeds or the 5 seconds have elapsed.
        Assert.True(arena.Player.IsDead);
    });
</code></pre>
<p>Generally you can follow any instructions you can find for <strong>XUnit</strong>. The only real difference aside from the cases above is that you use <code>[GodotFact]</code> instead of <code>[Fact]</code>.</p>
<h2 id="more-information">More information</h2>
<p>Check out the GodotXUnit Github page: 
<a href="https://github.com/fledware/GodotXUnit">https://github.com/fledware/GodotXUnit</a></p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Axis Aligned Bounding Boxes and Intersections</title>
        <author>
            <name>Pilvinen</name>
        </author>
        <link href="https://pilvimaa.fi/axis-aligned-bounding-boxes-and-intersections/"/>
        <id>https://pilvimaa.fi/axis-aligned-bounding-boxes-and-intersections/</id>
        <media:content url="https://pilvimaa.fi/media/posts/10/AABB.jpg" medium="image" />
            <category term="Math"/>
            <category term="C#"/>
            <category term="AABB"/>

        <updated>2022-07-16T01:47:10+03:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://pilvimaa.fi/media/posts/10/AABB.jpg" alt="" />
                    Let’s do a quick overview of AABBs and intersections. Axis Aligned Bounding Box is a set of three segments (or 6 numbers). AABBs can be used for fast overlapping tests.
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://pilvimaa.fi/media/posts/10/AABB.jpg" class="type:primaryImage" alt="" /></p>
                <p>Let’s do a quick overview of AABBs and intersections.</p>
<p>Axis Aligned Bounding Box is a set of three segments (or 6 numbers). AABBs can be used for fast overlapping tests.</p>
<p>In one dimension it is a <code>Segment</code> or <code>AxisAlignedBounds1D</code>:</p>
<pre><code class="language-cs">struct Segment {
    public float min;
    public float max;
}
</code></pre>
<p>Let’s calculate an intersection for two segments.</p>
<pre><code class="language-cs">Segment Intersect(Segment a, Segment b) =&gt;
    new Segment {
        Min = Math.Max(a.Min, b.Min),
        Max = Math.Min(a.Max, b.Max)
    };
</code></pre>
<p>In two dimensions it is a <code>Rectangle</code> or <code>AxisAlignedBounds2D</code>:</p>
<pre><code class="language-cs">struct Rectangle {
    Segment boundsX;
    Segment boundsY;
}
</code></pre>
<p>Let’s calculate an intersection for two rectangles.</p>
<pre><code class="language-cs">Rectangle Intersect(Rectangle a, Rectangle b) =&gt;
    new Rectangle {
        X = Segment.Intersect(a.X, b.X),
        Y = Segment.Intersect(a.Y, b.Y)
    };
</code></pre>
<p>In three dimensions it is <code>AABB</code> (Axis Aligned Bounding Box) or <code>AxisAlignedBounds3D</code>:</p>
<pre><code class="language-cs">struct AABB {
    public Segment boundsX;
    public Segment boundsY;
    public Segment boundsZ;
}
</code></pre>
<p>Let’s calculate an intersection for two AABBs.</p>
<pre><code class="language-cs">AABB Intersect(AABB a, AABB b) =&gt;
    new AABB {
        X = Segment.Intersect(a.X, b.X),
        Y = Segment.Intersect(a.Y, b.Y),
        Z = Segment.Intersect(a.Z, b.Z),
    };
</code></pre>
<p>Let’s do it slightly differently for fun.</p>
<p>Testing intersection via bounds in 1D:</p>
<pre><code class="language-cs">struct Bounds{
    public float Min;
    public float Max;
    
    public Bounds Intersection(Bounds other) =&gt;
        new Bounds {
            Min = Math.Max(this.Min, other.Min),
            Max = Math.Min(this.Max, other.Max)
        };
        
    public bool Intersects(Bounds other) {
        var i = this.Intersection(other);
        return i.Min &lt; i.Max;
    }
}
</code></pre>
<p>Testing intersections via bounds in 2D:</p>
<pre><code class="language-cs">struct Bounds2D {
    public Bounds BoundsX;
    public Bounds BoundsY;
    public Bounds2D Intersection(Bounds2D other) =&gt;
        new Bounds2D {
            BoundsX = this.XBounds.Intersection(other.BoundsX),
            BoundsY = this.YBounds.Intersection(other.BoundsY);
        };
    public bool IsValid =&gt; BoundsX.IsValid &amp;&amp; BoundsY.IsValid;
    public bool Intersects(Bounds2D other) =&gt;
        this.Intersection(other).IsValid;
}
</code></pre>
<p>Testing intersections via bounds in 3D:</p>
<pre><code class="language-cs">struct Bounds3D {
    public Bounds BoundsX;
    public Bounds BoundsY;
    public Bounds BoundsZ;
    public Bounds3D Intersection(Bounds3D other) =&gt;
        new Bounds3D {
            BoundsX = this.BoundsX.Intersection(other.BoundsX),
            BoundsY = this.BoundsY.Intersection(other.BoundsY);
            BoundsZ = this.BoundsZ.Intersection(other.BoundsZ);
        };
    public bool IsValid =&gt; BoundsX.IsValid &amp;&amp; BoundsY.IsValid &amp;&amp; BoundsZ.IsValid;
    public bool Intersects(Bounds3D other) =&gt;
        this.Intersection(other).IsValid;
}
</code></pre>

            ]]>
        </content>
    </entry>
</feed>
