<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>Csharp and Game Development Notes</title>
    <link href="https://pilvimaa.fi/feed.xml" rel="self" />
    <link href="https://pilvimaa.fi" />
    <updated>2023-11-01T21:09:44+02:00</updated>
    <author>
        <name>Pilvinen</name>
    </author>
    <id>https://pilvimaa.fi</id>

    <entry>
        <title>Godot Control node mouse input handling order</title>
        <author>
            <name>Pilvinen</name>
        </author>
        <link href="https://pilvimaa.fi/godot-control-node-mouse-input-handling-order/"/>
        <id>https://pilvimaa.fi/godot-control-node-mouse-input-handling-order/</id>
        <media:content url="https://pilvimaa.fi/media/posts/16/GodotMouseInput.jpeg" medium="image" />
            <category term="MouseFilter"/>
            <category term="Mouse"/>
            <category term="InputEvent"/>
            <category term="Godot"/>

        <updated>2023-11-01T21:09:44+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://pilvimaa.fi/media/posts/16/GodotMouseInput.jpeg" alt="" />
                    Godot mouse input handling is a source of lot of confusion. The basic idea is that **Mouse Filter set to Ignore ignores the element. Stop processes the received event and&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://pilvimaa.fi/media/posts/16/GodotMouseInput.jpeg" class="type:primaryImage" alt="" /></p>
                <p>Godot mouse input handling is a source of lot of confusion.</p>
<p>The basic idea is that **Mouse Filter set to <code>Ignore</code> ignores the element. <code>Stop</code> processes the received event and doesn’t pass it along. It stops there. While <code>Pass</code> handles the event but then passes it along so other nodes can process it.</p>
<p>Where most of the confusion happens is trying to figure out in what order the mouse input events get processed.</p>
<p>Godot handles the input in nodes in reverse depth-first order.</p>
<p>In other words the order is:</p>
<ol>
<li>Bottom to top (ie. reverse)</li>
<li>Children first (ie. depth).</li>
</ol>
<h1 id="tree-order-example">Tree order example</h1>
<pre><code>- Last
    - Sixth
        - Fifth
    - Fourth
        - Third
            - Second
            - First
</code></pre>
<p>One of the more important things to understand is that <em><strong>sibling nodes DO NOT react to Mouse Filter being set to <code>Pass</code>!!!</strong></em></p>
<p>When a node is <code>Pass</code>ing event forward it <strong>ONLY</strong> passes it to its direct parent.</p>
<p>And of course only elements affected by the mouse clicking - or other mouse input events - are processed in the first place. You can’t <code>Pass</code> event forward to something that wouldn’t receive an event to begin with!</p>
<h1 id="using-pass-an-example">Using Pass, an example</h1>
<p>Let’s assume a situation where we have a button that we want to press, and we also want to detect when the mouse enters and leaves the window - we use the <code>MouseEntered</code> and <code>MouseExited</code> events set up for that and the detection element covers the whole screen. OK, so.</p>
<p>This doesn’t work:</p>
<pre><code>- SceneRoot (Control)
    - Button (Texturebutton)
    - MouseDetectionElement (Control)
</code></pre>
<p>Why? </p>
<p>Because in this case <code>MouseDetectionElement</code> will block clicks to <code>Button</code> if it has its <code>MouseFilter</code> set to <code>Stop</code> and <code>Pass</code>.  And if it’s set to <code>Ignore</code> then it’s just inactive and doesn’t perform the function we would like it to do.</p>
<p>This won’t improve the situation:</p>
<pre><code>- SceneRoot (Control)
     - MouseDetectionElement (Control)
    - Button (Texturebutton)
</code></pre>
<p>Now we can click the <code>Button</code>, but <code>MouseDetectionElement</code> will generate erroneous mouse entered and mouse exited events whether it’s set to <code>Pass</code> or <code>Stop</code> because when the mouse moves over the <code>Button</code>, it is counted as exiting/entering the <code>MouseDetectionElement</code>. It’s not what we want here.</p>
<p>The correct solution is to make the <code>MouseDetectionElement</code> part of the hierarchy so that the <code>Button</code> can <code>Pass</code> the events forward to its parent, the <code>MouseDetectionElement</code>:</p>
<pre><code>- SceneRoot (Control)
     - MouseDetectionElement (Control)
        - Button (Texturebutton)
</code></pre>
<p>Here <code>Button</code> is processed first and with its <strong>Mouse Filter</strong> is set to <code>Pass</code> it will both:</p>
<ol>
<li>Process the mouse events </li>
<li>and pass them along to its parent, the <code>MouseDetectionElement</code>.</li>
</ol>
<p>The <code>MouseDetectionElement</code> can then on its turn handle all the events correctly.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>GDScript vs. C# in Godot: Which language should you use?</title>
        <author>
            <name>Pilvinen</name>
        </author>
        <link href="https://pilvimaa.fi/gdscript-vs-c-in-godot-which-language-should-you-use/"/>
        <id>https://pilvimaa.fi/gdscript-vs-c-in-godot-which-language-should-you-use/</id>
        <media:content url="https://pilvimaa.fi/media/posts/15/csharp_vs_gdscript_godot.png" medium="image" />
            <category term="gdscript"/>
            <category term="Godot"/>
            <category term="C#"/>

        <updated>2023-10-16T19:18:04+03:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://pilvimaa.fi/media/posts/15/csharp_vs_gdscript_godot.png" alt="Confusing schematics" />
                    Godot is a powerful and versatile game engine that supports two scripting languages: GDScript and C#. Both languages have their own advantages and disadvantages, so it’s important to choose the&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://pilvimaa.fi/media/posts/15/csharp_vs_gdscript_godot.png" class="type:primaryImage" alt="Confusing schematics" /></p>
                <p>Godot is a powerful and versatile game engine that supports two scripting languages: GDScript and C#. Both languages have their own advantages and disadvantages, so it’s important to choose the one that’s right for you.</p>
<h1 id="official-support">Official support</h1>
<p>Both GDScript and C# are officially supported by the Godot team. This means that both languages have equal access to the Godot API and documentation.</p>
<h1 id="popularity">Popularity</h1>
<p>GDScript is by far the more popular language in Godot. It’s supported by a large community of developers. C#, on the other hand, is a newer addition to Godot, but it’s quickly gaining popularity, especially among developers who are already familiar with the language.</p>
<h1 id="tutorials-and-resources">Tutorials and resources</h1>
<p>There are more tutorials and resources available for GDScript than for C#. This is because GDScript has been around for longer, and it’s the default language for Godot. However, the C# community is growing rapidly, and more tutorials and resources are becoming available all the time.</p>
<h1 id="your-existing-skills-matter">Your existing skills matter</h1>
<p>Your existing skill set and personal preferences are the most important factors to consider when choosing between GDScript and C#. </p>
<p>If you’re already familiar with C#, or if you have experience with other statically typed languages, then C# will be a more natural choice for you. You’ll be able to get started quickly, and you’ll be able to leverage your existing knowledge and skills.</p>
<p>On the other hand, if you’re new to programming, or if you have experience with dynamically typed languages like Python, then GDScript may be a better choice for you. GDScript is easier to learn, and it has a more forgiving syntax.</p>
<h1 id="ease-of-prototyping">Ease of prototyping</h1>
<p>GDScript is generally considered to be easier to prototype with than C#. This is because GDScript has a more relaxed syntax, and it doesn’t require as much boilerplate code. C#, on the other hand, is a more statically typed language, which can make it more difficult to prototype quickly.</p>
<h1 id="applicability-beyond-godot">Applicability beyond Godot</h1>
<p>C# is a more widely applicable language than GDScript. C# is the primary language used in the Unity game engine, and it’s also used in a variety of other game development tools and libraries. GDScript, on the other hand, is specific to the Godot game engine.</p>
<h1 id="syntax-and-style">Syntax and style</h1>
<p>GDScript is a Python-like language, with a simple and easy-to-read syntax. C#, on the other hand, is a more verbose language with a more traditional C-style syntax.</p>
<h1 id="type-safety">Type safety</h1>
<p>GDScript has a level of optional type safety. This means that you can choose to use type hints to make your code more type-safe, but it’s not required. C#, on the other hand, is a statically typed language, which means that all variables and expressions must have explicitly defined types.</p>
<h1 id="static-vs-dynamic-typing">Static vs. dynamic typing</h1>
<p>Static typing can help to prevent errors and make your code more maintainable. However, it can also make your code more verbose and difficult to prototype with. Dynamic typing, on the other hand, can make your code more concise and easier to prototype with, but it can also lead to more errors.</p>
<h1 id="ides">IDEs</h1>
<p>C# has several professional IDEs available, such as Rider, Visual Studio and Visual Studio Code. GDScript, on the other hand, doesn’t have any dedicated IDEs. However, GDScript can be used with any text editor, and there are several plugins available that provide IDE-like features, such as syntax highlighting, code completion, and debugging.</p>
<h1 id="ecosystem">Ecosystem</h1>
<p>The .NET ecosystem is massive in comparison to the GDScript ecosystem. This means that there are a lot more libraries and tools available for C# developers.</p>
<h1 id="debugging">Debugging</h1>
<p>It’s generally easier to get hard to fix runtime bugs in GDScript than in C#. This is because GDScript is dynamically typed, so you can inspect and modify variables at runtime. C#, on the other hand, is statically typed, so it can be more difficult to debug runtime errors.</p>
<h1 id="using-both-gdscript-and-csharp">Using both GDScript and Csharp</h1>
<p>It is possible to use both C# and GDScript in the same Godot project (but definitely not required). This can be useful for a variety of reasons, such as:</p>
<p>You could leverage the strengths of both languages. For example, you could use C# (or even C++) for performance-critical code, and GDScript for prototyping and scripting simple game mechanics.</p>
<p>However, there are also some potential drawbacks to using both C# and GDScript in the same project:</p>
<p>It can be more difficult to maintain a project that uses multiple languages. This is because you need to be aware of the differences between the two languages, and you need to make sure that your code is compatible with both languages.</p>
<p>It can be more difficult to debug a project that uses multiple languages. This is because you need to be able to debug code written in both languages.</p>
<h2 id="language-interoperability">Language interoperability</h2>
<p>C# code within a Godot project can be difficult to remove once it is introduced. This is because GDscript calling into C# is good, idiomatic GDscript. However, C# calling into GDscript is bad C#, as it requires referencing functions by string. This can make your code more difficult to maintain and debug.</p>
<p>In other words, once you start using C# code in your Godot project, it can be difficult to go back. This is because GDscript is designed to make it easy to call C# code, but C# is not designed to make it easy to call GDscript code.</p>
<p>If you are considering using multiple languages in your Godot project, I recommend that you think carefully about whether or not you need to use C#. If you do need to use C#, try to limit the amount of code that you call.</p>
<h1 id="performance">Performance</h1>
<p>A lot of new developers coming to Godot often worry about performance, so let’s talk about that for a bit.</p>
<h2 id="gdscript-vs-csharp-speed">GDScript vs. Csharp speed</h2>
<p>C# is generally faster than GDScript, but this is not true in all circumstances and all situations.</p>
<p>Marshalling can add overhead to C# code, especially when calling native Godot functions.</p>
<p>Marshalling is the process of converting data between different programming languages. Godot is written in C++. When you call a native Godot function from C#, the .NET runtime needs to marshal the data between the two languages. This can add overhead to your code, especially if you’re calling native functions frequently.</p>
<p>GDScript, on the other hand, doesn’t need to marshal data when calling native Godot functions. This is because GDScript is built on top of the Godot engine, and it has direct access to the Godot API.</p>
<p>As a result, GDScript code can sometimes be faster than C# code, especially when calling native Godot functions frequently.</p>
<h2 id="does-it-really-matter">Does it really matter</h2>
<p>If you’re developing a performance-critical game, then C# may be a better choice. </p>
<p>But for most games, the difference in performance between GDScript and C# will be negligible.</p>
<p>You can always write performance critical parts of your game in C++ if you find it necessary. It’s always an option whether you choose GDScript or C#.</p>
<p>About  marshalling specifically, you can avoid any major problems simply by being mindful of the fact that marshalling happens and avoiding excessive and unnecessary back and forth between C# and Godot.</p>
<p>Marshalling overhead is typically only significant in performance-critical applications, and you’re likely to hit other more critical bottle necks way before that happens. </p>
<p>Know the scale of your game, know your skillset, know your personal preferences. There are a lot of things to consider when choosing a language and performance is only one of those.</p>
<h1 id="final-words">Final words</h1>
<p>If you’re new to game development, or if you’re looking for a language that is easy to prototype with, or you’re already familiar with Python then GDScript is a good choice.</p>
<p>If you’re already familiar with C#, or if you need a language with better performance or a wider ecosystem, then C# is a good choice.</p>
<p>Ultimately it comes down to personal preference.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Node2D double click detection in Godot</title>
        <author>
            <name>Pilvinen</name>
        </author>
        <link href="https://pilvimaa.fi/node2d-double-click-detection-in-godot/"/>
        <id>https://pilvimaa.fi/node2d-double-click-detection-in-godot/</id>
        <media:content url="https://pilvimaa.fi/media/posts/14/computer_mice_double_click.png" medium="image" />
            <category term="InputEvent"/>
            <category term="Input"/>
            <category term="Godot"/>
            <category term="Csharp"/>
            <category term="C#"/>

        <updated>2023-06-14T02:08:31+03:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://pilvimaa.fi/media/posts/14/computer_mice_double_click.png" alt="Two mice using a computer mouse" />
                    Clicks for Node2D based nodes can easily be detected by using CollisionObject2D‘s input_event signal. To capture the mouse clicks we can add an Area2D node and a CollisionShape2D or CollisionPolygon2D&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://pilvimaa.fi/media/posts/14/computer_mice_double_click.png" class="type:primaryImage" alt="Two mice using a computer mouse" /></p>
                <p>Clicks for <code>Node2D</code>  based nodes can easily be detected by using <code>CollisionObject2D</code>‘s <code>input_event</code> signal.</p>
<p>To capture the mouse clicks we can add an <code>Area2D</code> node and a <code>CollisionShape2D</code> or <code>CollisionPolygon2D</code> as its child node. </p>
<p>Since we are using <code>CollisionObject2D</code>‘s <code>input_event</code> signal directly the <code>Area2D</code>‘s <code>Monitoring</code> and <code>Monitorable</code> won’t be used and we can disable those.</p>
<p><code>Area2D</code>‘s ‘<code>Collision &gt; Layer</code> needs to be set to some value or the clicks won’t be detected.</p>
<p>The <code>Area2D</code> node also needs to have <code>Input &gt; Pickable</code> set to <code>True</code>.</p>
<p>Give the <code>CollisionShape2D</code> a <code>Shape</code>, eg. <code>RectangleShape2D</code>, <code>CircleShape2D</code>, <code>CapsuleShape2D</code>, etc. and set its <code>Size</code> to the dimensions you want. This defines the area’s size and shape that can be clicked with the mouse. </p>
<p>Finally set the <code>CollisionShape2D</code>‘s <code>Transform &gt; Position</code> to the location where you want it.</p>
<p>Now we can add a script to the <code>Area2D</code> node and in <code>Area2D</code>‘s <code>Node &gt; Signals</code> connect the <code>input_event</code> to the script.</p>
<p>See example below.</p>
<pre><code class="language-cs">public void OnContainerBeingClicked(Node viewport, InputEvent @event, int shapeIdx) {  
  
    // Return if not mouse left button double click.  
    if (@event is not InputEventMouseButton mouseButtonEvent) return;  
    if (!mouseButtonEvent.Pressed) return;  
    if (mouseButtonEvent.ButtonIndex != MouseButton.Left) return;  
    if (!mouseButtonEvent.DoubleClick) return;  
  
    ToggleContainer();  
}
</code></pre>
<p>The code is pretty self-explanatory, but let’s break it down.</p>
<p>In the method signature we need to return <code>void</code>, and accept <code>Node</code>, <code>InputEvent</code>, and <code>int</code> as parameters - even if we don’t use them all. It’s simply required to connect the signal.</p>
<p>Since <code>event</code> is a reserved keyword we are required to place <code>@</code> in front of it if we want to use that particular name in our parameters, ie. <code>@event</code> instead of <code>event</code>. But we might as well use any other name such as <code>inputEvent</code> if it strikes your fancy - it really doesn’t matter. The parameter names can be what ever you want as long as the types match <code>Node</code>, <code>InputEvent</code> and <code>int</code>. The signal will still work.</p>
<p>We cannot directly handle <code>InputEventMouseButton</code>, so we need to use <code>InputEvent</code>  instead and cast it to <code>InputEventMouseButton</code>:</p>
<pre><code class="language-cs">if (@event is not InputEventMouseButton mouseButtonEvent) return;  
</code></pre>
<p>Here we check whether <code>@event</code> is or isn’t <code>InputEventMouseButton</code>. If it’s not we simply return and do nothing further with that particular input event - someone else can handle that one, what ever it is.</p>
<p>If the <code>@event</code> is <code>InputEventMouseButton</code> we cast it as <code>InputEventMouseButton</code> and expose the cast as a local variable called <code>mouseButtonEvent</code> and continue executing our code. We can now access the <code>InputEventMouseButton</code> mouse button event via <code>mouseButtonEvent</code> and do further things.</p>
<pre><code class="language-cs">if (!mouseButtonEvent.Pressed) return;
</code></pre>
<p>Here we immediately put it to use and check if the mouse button is not being pressed (ie. it’s likely being released instead), we will simply return and call it quits there - it’s not our concern.</p>
<pre><code class="language-cs">if (mouseButtonEvent.ButtonIndex != MouseButton.Left) return;
</code></pre>
<p>We still don’t know what kind of mouse button press this was, so we can check by using the <code>ButtonIndex</code> whether it was something else than a <strong>left</strong> mouse button press - in which case we simply return and call it quits again. It’s not our concern, since in this example we want to handle left mouse buttons clicks only.</p>
<pre><code class="language-csharp">if (!mouseButtonEvent.DoubleClick) return;
</code></pre>
<p>Finally we have a very handy way of checking whether a double click happened without having to deal with timers and special logic each time - we can simply check the <code>DoubleClick</code> property. Godot will expose to us automatically the information whether it was a double click or not. If it’s not a double click, again, we return and call it quits there.</p>
<p>Now we’ve determined:</p>
<ol>
<li>It is a mouse button event.</li>
<li>It is a mouse button being pressed down event.</li>
<li>It is a left mouse button event.</li>
<li>It is a double click</li>
</ol>
<p>So we know the user did a left mouse button double click, so we can now do what ever we want with that information.</p>
<pre><code class="language-csharp">ToggleContainer();
</code></pre>
<p>In the above example what we do is we call our own custom <code>ToggleContainer()</code> method which opens - or closes - an inventory container window for us.</p>
<p>But you can call your own methods or do what ever you want once you’ve ruled out all the cases you don’t want to react to like we did above one step at a time.</p>
<p>You can also combine the if-statements if you like. We have kept them separate in the example for additional clarity and readability.</p>
<p>But you might also do this:</p>
<pre><code class="language-csharp">if (@event is not InputEventMouseButton mouseButtonEvent  
    || !mouseButtonEvent.Pressed  
    || mouseButtonEvent.ButtonIndex != MouseButton.Left  
    || !mouseButtonEvent.DoubleClick) {  
    return;  
}
</code></pre>
<p>The IL code produced by either of these examples is slightly different, but not meaningfully so.</p>
<p>It’s also worth noting that when using <code>return</code>s, like in the first example, the stack traces can be more meaningful when tracking down problems.</p>
<p>But generally the second example would execute faster. But this would be in the realm of nano optimizations and might be made a moot point anyway by future updates to the runtime.</p>
<p>It’s also worth noting that in Godot 4 you can implicitly cast the <code>Node</code> by accepting <code>Viewport</code> instead of <code>Node</code> in the signal’s method signature as a parameter - and it will still work because <code>Viewport</code> is a child of <code>Node</code>.</p>
<p>So if you want to handle the input, for example, so it doesn’t propagate any further - and you don’t want to cast the <code>Node</code> in your code explicitly to <code>Viewport</code> which you need to access the <code>SetInputAsHandled()</code> method, you can accept a <code>Viewport</code> directly instead of <code>Node</code> which is declared in the <code>input_event</code> signal’s signature.</p>
<p>Eg.</p>
<pre><code class="language-csharp">public void OnContainerBeingClicked(Viewport viewport, InputEvent @event, int shapeIdx) {  
  
    // Return if not mouse left button double click.  
    if (@event is not InputEventMouseButton mouseButtonEvent) return;  
    if (!mouseButtonEvent.Pressed) return;  
    if (mouseButtonEvent.ButtonIndex != MouseButton.Left) return;  
    if (!mouseButtonEvent.DoubleClick) return;  
      
    viewport.SetInputAsHandled();  
    ToggleContainer();  
}
</code></pre>
<p>This will also work. Otherwise we would have to:</p>
<pre><code class="language-csharp">public void OnContainerBeingClicked(Node viewport, InputEvent @event, int shapeIdx) {  
  
    // Return if not mouse left button double click.  
    if (@event is not InputEventMouseButton mouseButtonEvent) return;  
    if (!mouseButtonEvent.Pressed) return;  
    if (mouseButtonEvent.ButtonIndex != MouseButton.Left) return;  
    if (!mouseButtonEvent.DoubleClick) return;  
      
    ((Viewport)viewport).SetInputAsHandled();  
    ToggleContainer();  
}
</code></pre>
<p>That’s mostly it for handling mouse double clicks in Node2D nodes.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Implicit and explicit conversion operators</title>
        <author>
            <name>Pilvinen</name>
        </author>
        <link href="https://pilvimaa.fi/implicit-and-explicit-conversion-operators/"/>
        <id>https://pilvimaa.fi/implicit-and-explicit-conversion-operators/</id>
        <media:content url="https://pilvimaa.fi/media/posts/13/Spaghetti.jpg" medium="image" />
            <category term="Implicit"/>
            <category term="Explicit"/>
            <category term="Conversion"/>
            <category term="C#"/>

        <updated>2022-07-30T10:25:33+03:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://pilvimaa.fi/media/posts/13/Spaghetti.jpg" alt="" />
                    Implicit and explicit conversion operators allow you to ingegrate your custom types seamlessly with other types by doing implicit or explicit conversions from one type to another. public void SetPositionFromVector3(Vector3&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://pilvimaa.fi/media/posts/13/Spaghetti.jpg" class="type:primaryImage" alt="" /></p>
                <p>Implicit and explicit conversion operators allow you to ingegrate your custom types seamlessly with other types by doing implicit or explicit conversions from one type to another.</p>
<pre><code class="language-cs">    public void SetPositionFromVector3(Vector3 vector) {
        // Do stuff.
    }

    MyType myType = new MyType(0,0,0);
    SetPositionFromVector3(myType); // Argument type &#39;MyType&#39; is not assignable to parameter type &#39;Vector3&#39;
</code></pre>
<p>If you’ve ever experienced one of those situations where you have your awesome custom type <code>MyType</code> which is essentially a <code>Vector3</code>, or what ever, with some extra spices that you really need … but now you can’t pass it to anything that really wants a <code>Vector3</code>. And you end up doing all kinds of weird things like exposing a special property or using inheritance and polymorphism to get it working… </p>
<p>Do not fret! We’ll have none of those shenanigans. <code>implicit</code> and <code>explicit</code> conversion operators to the rescue!</p>
<p>Let’s look at a simplification of how <code>implicit</code> operator is used.</p>
<pre><code class="language-cs">class MyType {
    private Vector3 _myValue;
    public float x =&gt; _myValue.x;
    public float y =&gt; _myValue.x;
    public float z =&gt; _myValue.x;
    public static implicit operator Vector3(MyType myType) =&gt; _myvalue;
    //  ^    ^       ^        ^       ^        ^-- Input type    ^-- Return value
    //  |    |       |        |       `-- Output type
    //  `----`-------`--------`-- Magical keywords
}
</code></pre>
<p>That’s how you get it working. But lets examine this declaration word by word and break it apart.</p>
<p>All the operators have to be declared <code>public</code> and they also have to be <code>static</code>.  Next we declare the <code>implicit</code> or <code>explicit</code> keyword. What <code>implicit</code> means is basically “Don’t ask stupid questions, just do the conversion for me - <em>implicitly</em>, automatically, ie. it is <em>implied</em>.” (The <code>explicit</code> keyword will be explained further down below). Next up we have to use the <code>operator</code> keyword which allows overloading existing C# operators. Then we have <code>Vector3</code> as the type which we overload, ie. essentially our “return type” if you allow such a simplification. In the parameters we have the type we are converting from. In our function body we define how the correct value gets returned. In this example we simply return the value from the private field <code>_myValue</code>.</p>
<p>The <code>explicit</code> keyword works in pretty much the same way as the <code>implicit</code> keyword, except you have to do the casting yourself, <em>explicitly</em>, when you use it, eg.</p>
<pre><code class="language-cs">    MyType myType = new MyType(0,0,0);
    SetPositionFromVector3((Vector3) myType); // explicit casting is required with explicit keyword.
</code></pre>
<p>Instead of implicitly as shown below.</p>
<pre><code class="language-cs">    MyType myType = new MyType(0,0,0);
    SetPositionFromVector3(myType); // with implicit keyword casting is done automatically.
</code></pre>
<p>NOTE: If you decide to use the <code>implicit</code> keyword, you have to be careful because it will be less obvious what is going on in the code.</p>
<p>To do the conversion the other way around, ie. in our example from <code>Vector3</code> to <code>MyType</code>, we can simply switch the places of the types and make sure somehow that the correct type and values are returned.</p>
<pre><code class="language-cs">class MyType {
    private Vector3 _myValue;
    // This is what we did before.
    public static implicit operator Vector3(MyType myType) =&gt; _myvalue;
    // Here we switched things around.
    public static implicit operator MyType(Vector3 myType) =&gt; new Vector3(myType.x, myType.z, myType.z);
}
</code></pre>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Unit testing private methods through extraction</title>
        <author>
            <name>Pilvinen</name>
        </author>
        <link href="https://pilvimaa.fi/unit-testing-private-methods-through-extraction/"/>
        <id>https://pilvimaa.fi/unit-testing-private-methods-through-extraction/</id>
        <media:content url="https://pilvimaa.fi/media/posts/12/Bugs.jpg" medium="image" />
            <category term="Unit Testing"/>
            <category term="C#"/>

        <updated>2022-07-24T14:43:32+03:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://pilvimaa.fi/media/posts/12/Bugs.jpg" alt="" />
                    When you use unit tests you have to intentionally write code that is testable. What about private methods? How do you test those? And no, you should NOT change the&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://pilvimaa.fi/media/posts/12/Bugs.jpg" class="type:primaryImage" alt="" /></p>
                <p>When you use unit tests you have to <em><strong>intentionally</strong></em> write code that is testable.</p>
<p>What about <code>private</code> methods? How do you test those?</p>
<p>And no, you <em><strong>should NOT</strong></em> change the accessibility of your methods (eg. <code>internal</code>, <code>public</code>, etc.) to make your code testable as you would lose your code’s correctness - there’s a reason why those <code>private</code> methods have been made <code>private</code>!</p>
<p>There are several ways to approach this problem. For example you could use the <code>PrivateObject</code> class. Or you could use <strong>reflection</strong>. </p>
<p>In this article, however, we are going to take a look at using <strong>extraction</strong> and good coding practices to make our <code>private</code> methods more accessible while also retaining our code’s correctness.</p>
<p>Let’s assume a situation where</p>
<pre><code class="language-cs">public class Player {
    
    private void Attack() {
        System.Console.WriteLine(&quot;Enemy takes damage!&quot;);
    }
    
    private void Move() {
        System.Console.WriteLine(&quot;You moved!&quot;);
    }
    
    public override void _PhysicsProcess(float delta) {
        Attack();
        Move();
    }
    
}
</code></pre>
<p>You can’t test the above methods, <code>Attack()</code> and <code>Move()</code>, because they are <code>private</code> and not exposed to the outside world. But you also want to keep it that way, it’s an important requirement.</p>
<p>Making the methods <code>public</code> would be bad. Using reflection to test the methods would work, but it’s not fun nor a good approach in general.</p>
<p>Let’s use <strong>method extraction</strong> instead and turn those methods into <strong>abstractions</strong>.</p>
<pre><code class="language-cs">public class RefactoredPlayer {
    private Attacker attacker;
    private Mover mover;

    public override void _PhysicsProcess(float delta) {
        attacker.Attack();
        mover.Move();
    }
}
</code></pre>
<p>What we’ve done here is we’ve refactored the <code>Player</code> class and extracted the <code>Attack()</code> and <code>Move()</code> methods into their own classes, <code>Attacker</code> and <code>Mover</code>. Now the <code>RefactoredPlayer</code> describes only the <em>flow of the code</em> and not it’s <em>implementation</em>, thus allowing us to keep the composed <code>attacker</code> and <code>mover</code> objects in the <code>RefactoredPlayer</code> class <code>private</code> while exposing the abstractions as <code>public</code> (see below).</p>
<pre><code class="language-cs">public abstract class Attacker {
    public abstract void Attack();
}

public abstract class Mover {
    public abstract void Move();
}
</code></pre>
<p><strong>IMPORTANT:</strong> We don’t have to test the <code>RefactoredPlayer</code> class anymore, we can now test the <em><strong>actual implementations</strong></em> of <code>Attacker</code> and <code>Mover</code> or the <em><strong>abstract classes</strong></em> themselves (for that you need to make an anonymous class implementation of your abstract class as you can’t instantiate an abstract class). Which one you want to do depends mostly on whether your actual implementations have extra features beyond the promises made in the <code>abstract</code> classes or not.</p>
<p>As a bonus you can now have several implementations of <code>Attacker</code> and <code>Mover</code> and depend upon <strong>abstractions</strong> instead of concrete implementations giving your <code>RefactoredPlayer</code> class less reasons to change and your code becomes more flexible.</p>
<pre><code class="language-cs">public class SwordAttack : Attacker {
    public override void Attack() {
        System.Console.WriteLine(&quot;You skewer the enemy with your sword!&quot;);
    }
}
</code></pre>
<p>Here we have an example of an actual implementation of one of our abstract classes. We would still want to depend upon the abstraction <code>Attacker</code> rather than the implementation <code>SwordAttack</code> - to make our code more fluid and easier to change. This way we don’t have to change our <code>RefactoredPlayer</code> class if our implementation changes or gets swapped out to something else that is also implementing the <code>abstract</code> class <code>Attacker</code>.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Getting GodotXUnit up and Running with Rider</title>
        <author>
            <name>Pilvinen</name>
        </author>
        <link href="https://pilvimaa.fi/getting-godotxunit-up-and-running-with-rider/"/>
        <id>https://pilvimaa.fi/getting-godotxunit-up-and-running-with-rider/</id>
        <media:content url="https://pilvimaa.fi/media/posts/11/Test.jpg" medium="image" />
            <category term="XUnit"/>
            <category term="Unit Testing"/>
            <category term="GodotXUnit"/>
            <category term="Godot"/>
            <category term="C#"/>

        <updated>2022-07-18T17:54:14+03:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://pilvimaa.fi/media/posts/11/Test.jpg" alt="" />
                    Installation from Github These instructions will explain how to get GodotXUnit integrated to your project and working with Rider. [XunitTestCaseDiscoverer(&quot;GodotXUnitApi.Internal.GodotFactDiscoverer&quot;, &quot;GodotXUnitApi&quot;)] And replace the GodotXUnitApi with your project’s assembly name,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://pilvimaa.fi/media/posts/11/Test.jpg" class="type:primaryImage" alt="" /></p>
                <h2 id="installation-from-github">Installation from Github</h2>
<p>These instructions will explain how to get GodotXUnit integrated to your project and working with Rider.</p>
<ol>
<li>Clone the <code>Master</code> branch of the GodotXUnit project in some temporary folder:
<code>git clone https://github.com/fledware/GodotXUnit.git</code></li>
<li>From the freshly cloned project, copy the contents of the <code>addons</code> folder into your project’s <code>addons</code> folder - or if that doesn’t exist yet then simply copy the whole <code>addons</code> folder itself to your Godot project’s root. After doing this you  can delete the rest of the files from the cloned project, you don’t need them.</li>
<li>Delete any <code>.csproj</code> files you can find under <code>addons/GodotXUnit</code> and its sub-folders. At the time of writing this there should be only one <code>.csproj</code> located at <code>addons/GodotXUnit/GodotXUnitApi/GodotXUnitApi.csproj</code>. Delete it. With this installation method the GodotXUnit will become a part of your own project, so there’s no need to have any other <code>.csproj</code> files lying around.</li>
<li>In the file <code>addons/GodotXUnit/GodotXUnitApi/GodotFactAttribute.cs</code> find a line that says:</li>
</ol>
<pre><code class="language-xml">[XunitTestCaseDiscoverer(&quot;GodotXUnitApi.Internal.GodotFactDiscoverer&quot;, &quot;GodotXUnitApi&quot;)]
</code></pre>
<p>And replace the <code>GodotXUnitApi</code> with your project’s assembly name, eg.</p>
<pre><code class="language-xml">[XunitTestCaseDiscoverer(&quot;GodotXUnitApi.Internal.GodotFactDiscoverer&quot;, &quot;MyAwesomeGodotProject&quot;)]
</code></pre>
<p>You have to do this because GodotXUnit will scan your project for test cases and it needs to know the assembly to scan. If you <em><strong>don’t</strong></em> do this GodotXUnit will not find your test cases. </p>
<ol start="6">
<li>Add these dependencies to your project’s <code>.csproj</code></li>
</ol>
<pre><code class="language-xml">&lt;ItemGroup&gt;
    &lt;PackageReference Include=&quot;Newtonsoft.Json&quot; Version=&quot;12.0.3&quot; /&gt;
    &lt;PackageReference Include=&quot;xunit&quot; Version=&quot;2.4.1&quot; /&gt;
    &lt;PackageReference Include=&quot;xunit.runner.utility&quot; Version=&quot;2.4.1&quot; /&gt;
&lt;/ItemGroup&gt;
</code></pre>
<p>Now you should be good to go.</p>
<h2 id="running-the-tests">Running the tests</h2>
<p>Annotate your tests with <code>[GodotFact]</code> and they should work directly from Rider.</p>
<p>If you want to write anything that uses the <strong>Godot Engine</strong>, make sure you make a <strong>base class</strong> for these tests and annotate it with a <strong>Collection attribute</strong>, as shown in the example below.</p>
<pre><code class="language-cs">// super important - this prevents the tests from running in parallel.
// if they would run in parallel, they would interfere with each other.
[Collection(&quot;Integration Tests&quot;)] public abstract class BaseTest : IAsyncLifetime
</code></pre>
<p>And when <strong>waiting</strong> for things:</p>
<pre><code class="language-cs">
// Then within 5 seconds the player should be dead because
// the monster will attack the player.
    await GetTree().WithinSeconds(5, () =&gt; {
        // This assertion will be repeatedly run every frame
        // until it either succeeds or the 5 seconds have elapsed.
        Assert.True(arena.Player.IsDead);
    });
</code></pre>
<p>Generally you can follow any instructions you can find for <strong>XUnit</strong>. The only real difference aside from the cases above is that you use <code>[GodotFact]</code> instead of <code>[Fact]</code>.</p>
<h2 id="more-information">More information</h2>
<p>Check out the GodotXUnit Github page: 
<a href="https://github.com/fledware/GodotXUnit">https://github.com/fledware/GodotXUnit</a></p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Axis Aligned Bounding Boxes and Intersections</title>
        <author>
            <name>Pilvinen</name>
        </author>
        <link href="https://pilvimaa.fi/axis-aligned-bounding-boxes-and-intersections/"/>
        <id>https://pilvimaa.fi/axis-aligned-bounding-boxes-and-intersections/</id>
        <media:content url="https://pilvimaa.fi/media/posts/10/AABB.jpg" medium="image" />
            <category term="Math"/>
            <category term="C#"/>
            <category term="AABB"/>

        <updated>2022-07-16T01:47:10+03:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://pilvimaa.fi/media/posts/10/AABB.jpg" alt="" />
                    Let’s do a quick overview of AABBs and intersections. Axis Aligned Bounding Box is a set of three segments (or 6 numbers). AABBs can be used for fast overlapping tests.
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://pilvimaa.fi/media/posts/10/AABB.jpg" class="type:primaryImage" alt="" /></p>
                <p>Let’s do a quick overview of AABBs and intersections.</p>
<p>Axis Aligned Bounding Box is a set of three segments (or 6 numbers). AABBs can be used for fast overlapping tests.</p>
<p>In one dimension it is a <code>Segment</code> or <code>AxisAlignedBounds1D</code>:</p>
<pre><code class="language-cs">struct Segment {
    public float min;
    public float max;
}
</code></pre>
<p>Let’s calculate an intersection for two segments.</p>
<pre><code class="language-cs">Segment Intersect(Segment a, Segment b) =&gt;
    new Segment {
        Min = Math.Max(a.Min, b.Min),
        Max = Math.Min(a.Max, b.Max)
    };
</code></pre>
<p>In two dimensions it is a <code>Rectangle</code> or <code>AxisAlignedBounds2D</code>:</p>
<pre><code class="language-cs">struct Rectangle {
    Segment boundsX;
    Segment boundsY;
}
</code></pre>
<p>Let’s calculate an intersection for two rectangles.</p>
<pre><code class="language-cs">Rectangle Intersect(Rectangle a, Rectangle b) =&gt;
    new Rectangle {
        X = Segment.Intersect(a.X, b.X),
        Y = Segment.Intersect(a.Y, b.Y)
    };
</code></pre>
<p>In three dimensions it is <code>AABB</code> (Axis Aligned Bounding Box) or <code>AxisAlignedBounds3D</code>:</p>
<pre><code class="language-cs">struct AABB {
    public Segment boundsX;
    public Segment boundsY;
    public Segment boundsZ;
}
</code></pre>
<p>Let’s calculate an intersection for two AABBs.</p>
<pre><code class="language-cs">AABB Intersect(AABB a, AABB b) =&gt;
    new AABB {
        X = Segment.Intersect(a.X, b.X),
        Y = Segment.Intersect(a.Y, b.Y),
        Z = Segment.Intersect(a.Z, b.Z),
    };
</code></pre>
<p>Let’s do it slightly differently for fun.</p>
<p>Testing intersection via bounds in 1D:</p>
<pre><code class="language-cs">struct Bounds{
    public float Min;
    public float Max;
    
    public Bounds Intersection(Bounds other) =&gt;
        new Bounds {
            Min = Math.Max(this.Min, other.Min),
            Max = Math.Min(this.Max, other.Max)
        };
        
    public bool Intersects(Bounds other) {
        var i = this.Intersection(other);
        return i.Min &lt; i.Max;
    }
}
</code></pre>
<p>Testing intersections via bounds in 2D:</p>
<pre><code class="language-cs">struct Bounds2D {
    public Bounds BoundsX;
    public Bounds BoundsY;
    public Bounds2D Intersection(Bounds2D other) =&gt;
        new Bounds2D {
            BoundsX = this.XBounds.Intersection(other.BoundsX),
            BoundsY = this.YBounds.Intersection(other.BoundsY);
        };
    public bool IsValid =&gt; BoundsX.IsValid &amp;&amp; BoundsY.IsValid;
    public bool Intersects(Bounds2D other) =&gt;
        this.Intersection(other).IsValid;
}
</code></pre>
<p>Testing intersections via bounds in 3D:</p>
<pre><code class="language-cs">struct Bounds3D {
    public Bounds BoundsX;
    public Bounds BoundsY;
    public Bounds BoundsZ;
    public Bounds3D Intersection(Bounds3D other) =&gt;
        new Bounds3D {
            BoundsX = this.BoundsX.Intersection(other.BoundsX),
            BoundsY = this.BoundsY.Intersection(other.BoundsY);
            BoundsZ = this.BoundsZ.Intersection(other.BoundsZ);
        };
    public bool IsValid =&gt; BoundsX.IsValid &amp;&amp; BoundsY.IsValid &amp;&amp; BoundsZ.IsValid;
    public bool Intersects(Bounds3D other) =&gt;
        this.Intersection(other).IsValid;
}
</code></pre>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Seeded Random Numbers</title>
        <author>
            <name>Pilvinen</name>
        </author>
        <link href="https://pilvimaa.fi/seeded-random-numbers/"/>
        <id>https://pilvimaa.fi/seeded-random-numbers/</id>
        <media:content url="https://pilvimaa.fi/media/posts/9/Dice.jpg" medium="image" />
            <category term="World Generation"/>
            <category term="Random Numbers"/>
            <category term="C#"/>

        <updated>2022-07-14T21:10:44+03:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://pilvimaa.fi/media/posts/9/Dice.jpg" alt="" />
                    Sometimes you need pseudo-random numbers which are not dependent on time and which are always reliably identical and given in the same order when ever you re-start the application or&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://pilvimaa.fi/media/posts/9/Dice.jpg" class="type:primaryImage" alt="" /></p>
                <p>Sometimes you need pseudo-random numbers which are not dependent on time and which are always reliably identical and given in the same order when ever you re-start the application or re-create the <code>Random</code> generator object.</p>
<p>This can be achieved by giving the <code>Random</code> generator instance a seed value.</p>
<pre><code class="language-cs">Random random = new Random(1273456);
</code></pre>
<p>This is very useful in situations where you, for example, need to generate identical terrain each time your game runs.</p>
<p>The seed value could be shared between client and server or between friends to generate the same world on different machines provided that the generation code remains identical between versions of the application.</p>
<h2 id="several-random-number-generators-sharing-a-seed">Several Random Number Generators Sharing a Seed</h2>
<p>Csharp’s random number generator is not thread safe.  This means if you need random number generation and you have several threads which need those numbers they can’t share the same instance, it’s not safe to do so.</p>
<p>In such cases you might need to have several random number generators which are based on the same seed to keep the behavior consistent.</p>
<p>A common way to do this is to use a master random number generator and have that generate the seed values for any subsequent random number generators. But this approach has problems even though it’s common. If you do this you will get bi-modal peaks for your range where it’s more likely to get numbers from those peaks - making the random generation less random.</p>
<p>A simple working solution to this problem is to increment your seed by +1 for each new subsequent random number generator like shown in the example below.</p>
<pre><code class="language-cs">using System;  
  
internal class SeededRandomExample {  
    public Random TerrainRandom;  
    public Random BiomeRandom;  
    public Random VegetationRandom;  
    public int Seed { get; set; } = 481203849;  
    public SeededRandomExample() {  
        int terrainSeed = Seed;  
        TerrainRandom = new Random(terrainSeed);  
        int biomeSeed = Seed + 1;  
        BiomeRandom = new Random(biomeSeed);  
        int vegetationSeed = Seed + 2;  
        VegetationRandom = new Random(vegetationSeed);  
    }  
}
</code></pre>
<p>This solution will give you better and more consistently (pseudo-) random numbers while keeping the random number generators tied to the same seed value.</p>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Godot MultiMesh SetAsBulkArray Method</title>
        <author>
            <name>Pilvinen</name>
        </author>
        <link href="https://pilvimaa.fi/godot-multimesh-setasbulkarray-method/"/>
        <id>https://pilvimaa.fi/godot-multimesh-setasbulkarray-method/</id>
        <media:content url="https://pilvimaa.fi/media/posts/8/MultiMeshBlocks.png" medium="image" />
            <category term="MultiMeshInstance"/>
            <category term="Godot Game Engine"/>
            <category term="C#"/>

        <updated>2022-07-14T21:10:52+03:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://pilvimaa.fi/media/posts/8/MultiMeshBlocks.png" alt="" />
                    This article tries to bridge the gaps and ambiguities in the official Godot documentation for SetAsBulkArray(). We don’t go over everything. But armed with this information you should be able&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://pilvimaa.fi/media/posts/8/MultiMeshBlocks.png" class="type:primaryImage" alt="" /></p>
                <p>This article tries to bridge the gaps and ambiguities in the official Godot documentation for <code>SetAsBulkArray()</code>. We don’t go over <em><strong>everything</strong></em>. But armed with this information you should be able to figure it out.</p>
<p><code>MultiMeshInstance</code>‘s <code>MultiMesh</code> resource has a <code>SetAsBulkArray()</code> method which allows you to set all the data for your <code>MultiMesh</code> directly from a <code>float[]</code> array in one swift operation.</p>
<p>The great thing about this is that it’s as efficient as it can get. And you get to generate the data yourself in any way you want.</p>
<h2 id="but-how-to-generate-the-data">But how to generate the data?</h2>
<p>The documentation for <code>SetAsBulkArray()</code> at the time of writing this is pretty terrible, so let’s go over the essentials.</p>
<p>The  data for the array can be composed of three different parts:</p>
<ul>
<li>Transform data</li>
<li>Color data</li>
<li>Custom data</li>
</ul>
<p>Transform data is mandatory, but the color data and custom data are optional.</p>
<h3 id="transform-data">Transform data</h3>
<p>What the transform data does is it tells <code>MultiMeshInstance</code> where your objects instances should be located, what their scale should be, and what their shears should be.</p>
<p>The transform data is a matrix of 12 <code>float</code> values:</p>
<pre><code class="language-cs">// Transform data for a single mesh instance.  
float scaleX = 1f, shearXalongY = 0f, shearXalongZ = 0f, translateX = xOffset, // 3 Basis and Origin X.  
      shearYalongX = 0f, scaleY = 1f, shearYalongZ = 0f, translateY = yOffset, // 3 Basis and Origin Y.  
      shearZalongX = 0f, shearZalongY = 0f, scaleZ = 1f, translateZ = zOffset; // 3 Basis and Origin Z.
</code></pre>
<p>It is noteworthy that the offsets <code>translateX</code>, <code>translateY</code>, and <code>translateZ</code> are placed always right after the 3 basis values (eg. <code>scaleX</code>, <code>shearXalongY</code>, <code>shearXalongZ</code> in the above example) interleaved in the data instead of having them sitting at the end grouped together like you might expect.</p>
<p>The scale values change the scale of the mesh like you would expect. The shear values deform the mesh in different ways. And the translate values move the mesh around along the <code>x</code>, <code>y</code>, and <code>z</code> axis.</p>
<h3 id="color-data">Color data</h3>
<p>Vertex color data can be passed to <code>SetAsBulkArray()</code> in two formats.</p>
<p>You can pass it either as four <code>float</code>s (more accurate colors) representing the color data as rgba (red, green, blue, alpha) or as a single <code>float</code> (faster, smaller) which has four <code>byte</code>s crammed into it forcibly as Color8. These four bytes represent the <code>rgba</code> values but with less data and less accuracy (you’re never going to notice).</p>
<p>You can also disable the color information if you don’t need it.</p>
<p>When we create the <code>MultiMesh</code> we need to declare which format were are going to use.</p>
<p>NOTE: Which ever <code>ColorFormat</code> you choose the data you generate yourself will always has to match the selected <code>ColorFormat</code> or you will get errors and nothing will work.</p>
<p>Let’s look at practical examples where we declare the format when we create a new <code>MultiMesh</code>. I have removed all other values so we can focus on the color format:</p>
<h4 id="example-1-declaring-we-use-the-binary-format">Example 1: Declaring we use the binary format</h4>
<pre><code class="language-cs">MultiMesh multiMesh = new () {  
    ColorFormat = MultiMesh.ColorFormatEnum.Color8bit;  
};
</code></pre>
<p>Above we declare we are going to use the Color8 byte format where we pass a single float.</p>
<h4 id="example-2-declaring-we-use-the-float-format">Example 2: Declaring we use the float format</h4>
<pre><code class="language-cs">MultiMesh multiMesh = new () {  
    ColorFormat = MultiMesh.ColorFormatEnum.Float;  
};
</code></pre>
<p>Above we declare we are going to use the format with four float values representing the rgba values.</p>
<h4 id="example-3-declaring-we-have-no-color-information">Example 3: Declaring we have no color information</h4>
<pre><code class="language-cs">MultiMesh multiMesh = new () {  
    ColorFormat = MultiMesh.ColorFormatEnum.None;  
};
</code></pre>
<h3 id="creating-the-color8bit-color-data">Creating the Color8bit color data</h3>
<p>Let’s start right off by diving into some code.</p>
<pre><code class="language-cs">// Our colors as raw values (between 0 and 1).
float red = 0.1f;
float green = 0.2f;
float blue = 0.3f;
float alpha = 1f;

// Convert to RGBA from 0 to 255.
red = red * 255;
green = green * 255;
blue = blue * 255;
alpha = alpha * 255;

// We need to pass an array, so we create one.
byte[] myColors = new byte[4];

// Assign colors to the array we need to input.
myColors[0] = (byte) red;
myColors[1] = (byte) green;
myColors[2] = (byte) blue;
myColors[3] = (byte) alpha;

// This is how we cram 4 bytes into a float.
float color = BitConverter.ToSingle(myColors, 0);
</code></pre>
<p>Keep in mind that this is a <em><strong>contrived</strong></em> example and you will have to think for yourself how to solve your particular loops, functions, and such for constructing the <em><strong>practical</strong></em> color data for your meshes.</p>
<p>The example above shows you how to get a <code>float</code> which some of you might find to be a rather strange <code>float</code>. It has 4 bytes crammed into it and it might be a negative number or otherwise rather curious in it’s value range.</p>
<p>The example above is all you really need. But for a deeper understanding, let’s go over the code in detail.</p>
<pre><code class="language-cs">float red = 0.1f;
float green = 0.2f;
float blue = 0.3f;
float alpha = 1f;
</code></pre>
<p>First, we need to have some <strong>color values</strong> to work with. So we create some in the <strong>raw format</strong> which ranges from <code>0</code> to <code>1</code> so we can better understand how to convert raw values to the format we actually need. Feel free to skip this stage if you’re not using raw values and your color data is already in the <code>0</code> to <code>255</code> range.</p>
<p>Just note that you will get trouble if you try to use the wrong color format.</p>
<p>You would most likely have a function which gives you the colors you want. But for the sake of this example it doesn’t really matter where your colors come from, or in what format, as long as you have your colors ready at hand and in the correct format by the time you’re ready to pass them on.</p>
<pre><code class="language-cs">red = red * 255;
green = green * 255;
blue = blue * 255;
alpha = alpha * 255;
</code></pre>
<p>By multiplying the raw colors that are in the scale of <code>0</code> to <code>1</code> with <code>255</code> we transform them from the scale of <code>0</code> to <code>255</code>. It is required for the Color8bit binary format.</p>
<pre><code class="language-cs">byte[] myColors = new byte[4];
</code></pre>
<p><code>BitConverter</code> uses <code>byte[]</code> as input, so we need to have a byte array in which to pass our data. The size of the array has to be to be <code>4</code> as we have <code>4</code> colors: red, green, blue, and alpha.</p>
<p>NOTE: You most likely do not want to declare this array <em><strong>inside</strong></em> of your color processing loop. You might be generating a lot of mesh instance data and creating a lot of new arrays which become useless right after might not be a good idea. So I recommend declaring the array outside of your loop and reusing the array.</p>
<pre><code class="language-cs">myColors[0] = (byte) red;
myColors[1] = (byte) green;
myColors[2] = (byte) blue;
myColors[3] = (byte) alpha;
</code></pre>
<p>Next we simply assign the color values to the array and cast them as bytes since a <code>byte</code> array is required and our color values are still floats.</p>
<pre><code class="language-cs">float color = BitConverter.ToSingle(myColors, 0);
</code></pre>
<p>Finally we use <code>BitConverter.ToSingle()</code> to get our weird-ass <code>float</code> which has 4 colors packed as a single <code>float</code>.</p>
<p>What <code>BitConverter</code> does is it basically uses <code>unsafe</code> methods to copy the data as-is really fast and efficiently from <code>myColors</code> array directly to the <code>4</code> bytes in the target <code>float</code>.</p>
<p>That’s it. You can now use the single <code>float</code> in your <code>MultiMesh</code> data array.</p>
<p>If you feel the urge to understand on a deeper level why this weird dance is necessary you have to look into how <code>float</code> values work.</p>
<p>Floating point values quite complex and clever under the hood and that’s why you need special considerations when putting them together from bytes. But we won’t get deeper into that here as it’s a whole subject unto itself.</p>
<p>NOTE: There might be a simpler way of doing this. But I’m not aware if it at the time of writing this.</p>
<h3 id="creating-the-float-color-data">Creating the float color data</h3>
<pre><code class="language-cs">float red = 0.5f
float green = 0.5f
float blue = 0.5f
float alpha = 1f
</code></pre>
<p>And you’re done. Just replace the values with the color values you want using the raw color format with values between <code>0</code> and <code>1</code>.</p>
<h4 id="accessing-the-data-from-a-shader">Accessing the data from a shader</h4>
<p>The color information can be accessed via <code>COLOR</code> in the shader automatically.</p>
<p><strong>Example:</strong></p>
<pre><code class="language-cs">void fragment() {
    ALBEDO = COLOR.rgb;
}
</code></pre>
<h3 id="custom-data">Custom data</h3>
<p>The process for custom data is <em><strong>largely identical</strong></em> to the color data (except for the color specific parts). Read the color data section above for the details.</p>
<p><code>MultiMesh</code> custom data can be accessed automatically in the shader via <code>INSTANCE_CUSTOM</code> and the id number with <code>INSTANCE_ID</code>.</p>
<h3 id="putting-it-all-together">Putting it all together</h3>
<p>You have your transforms, you have your color data, and you have your custom data. Now we need to put it into an array that represents all the data for all the meshes in your <code>MultiMesh</code>.</p>
<h4 id="create-and-pass-your-multimesh-to-your-multimeshinstance">Create and pass your MultiMesh to your MultiMeshInstance</h4>
<pre><code class="language-cs">MultiMesh multiMesh = new () {  
    TransformFormat = MultiMesh.TransformFormatEnum.Transform3d,  
    ColorFormat = MultiMesh.ColorFormatEnum.Color8bit,  
    CustomDataFormat = MultiMesh.CustomDataFormatEnum.Float,  
    InstanceCount = totalCount,  
    VisibleInstanceCount = -1,  
    Mesh = mesh,  
};  
  
Multimesh = multiMesh;
</code></pre>
<p>You would do this inside of your <code>MultiMeshInstance</code> Make sure all the data is set correctly and to correct values for your use case.</p>
<h4 id="generate-multimeshdata-full-example">Generate MultiMeshData full example</h4>
<pre><code class="language-cs">internal float[] GenerateMultiMeshData() {  
      
    int transformDataSize = 12;  
    int colorDataSize = 1;  
    int customDataSize = 4;  
    int dataSize = transformDataSize + colorDataSize + customDataSize;  
    int maxIterations = 10;  
    int maxDataSize = maxIterations * dataSize;  
    int rgbaDataSize = 4;  
    byte[] randomColorsArray = new byte[rgbaDataSize];  
    float[] multiMeshData = new float[maxDataSize];  
    Random random = new Random();  
  
    int dataIteration = 0;  
    for (; dataIteration &lt; maxDataSize; dataIteration += dataSize) {  
  
        int xOffset = dataIteration / dataSize;  
        int yOffset = 0;  
        int zOffset = 0;  
  
        // Generate transforms data.      
float scaleX = 1f, shearXalongY = 0f, shearXalongZ = 0f, translateX = xOffset,  
              shearYalongX = 0f, scaleY = 1f, shearYalongZ = 0f, translateY = yOffset,  
              shearZalongX = 0f, shearZalongY = 0f, scaleZ = 1f, translateZ = zOffset;  
  
        // Generate random color data.      
float red = random.Next(0, 256);  
        float green = random.Next(0, 256);  
        float blue = random.Next(0, 256);  
        float alpha = 255f;  
        randomColorsArray[0] = (byte) red;  
        randomColorsArray[1] = (byte) green;  
        randomColorsArray[2] = (byte) blue;  
        randomColorsArray[3] = (byte) alpha;  
        float color = BitConverter.ToSingle(randomColorsArray, 0);  
  
        // Generate custom data.  
        float dataA = 0f, dataB = 0f, dataC = 0f, dataD = 0f;  
  
        // Assign the data of a single mesh to the array one mesh at a time per loop iteration.  
        multiMeshData[dataIteration] = scaleX;  
        multiMeshData[dataIteration + 1] = shearXalongY;  
        multiMeshData[dataIteration + 2] = shearXalongZ;  
        multiMeshData[dataIteration + 3] = translateX;  
        multiMeshData[dataIteration + 4] = shearYalongX;  
        multiMeshData[dataIteration + 5] = scaleY;  
        multiMeshData[dataIteration + 6] = shearYalongZ;  
        multiMeshData[dataIteration + 7] = translateY;  
        multiMeshData[dataIteration + 8] = shearZalongX;  
        multiMeshData[dataIteration + 9] = shearZalongY;  
        multiMeshData[dataIteration + 10] = scaleZ;  
        multiMeshData[dataIteration + 11] = translateZ;  
        multiMeshData[dataIteration + 12] = color;  
        multiMeshData[dataIteration + 13] = dataA;  
        multiMeshData[dataIteration + 14] = dataB;  
        multiMeshData[dataIteration + 15] = dataC;  
        multiMeshData[dataIteration + 16] = dataD;  
    }  
    return multiMeshData;  
}
</code></pre>
<h4 id="error-condition-dsize--p_arraysize-is-true">ERROR: Condition “dsize != p_array.size()” is true.</h4>
<p>This error is caused by your data not having the length you told <code>MultiMesh</code> it would have.</p>
<ol>
<li><p>Make sure your <code>ColorFormat</code>, <code>CustomDataFormat</code>, and <code>InstanceCount</code> are set to the correct values reflecting what your data has.</p>
</li>
<li><p>Make sure your generated data is of correct length. Make sure you are not accidentally missing data fields.</p>
</li>
<li><p>Make sure you are iterating through the data correctly in your loops. Check your index values and how they are used and incremented in code.</p>
</li>
<li><p>It didn’t fix the issue? Go through the checklist again, carefully.</p>
</li>
</ol>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Inheritance with Constructors</title>
        <author>
            <name>Pilvinen</name>
        </author>
        <link href="https://pilvimaa.fi/inheritance-with-constructors/"/>
        <id>https://pilvimaa.fi/inheritance-with-constructors/</id>
        <media:content url="https://pilvimaa.fi/media/posts/7/Binary.png" medium="image" />
            <category term="Inheritance"/>
            <category term="Constructors"/>
            <category term="C#"/>

        <updated>2022-07-14T21:11:01+03:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://pilvimaa.fi/media/posts/7/Binary.png" alt="" />
                    Here we call the constructor of the base class A and pass the id as a parameter to initialize _id in the constructor of A class. By doing this way&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://pilvimaa.fi/media/posts/7/Binary.png" class="type:primaryImage" alt="" /></p>
                <p>Here we call the constructor of the <strong>base class A</strong> and pass the <code>id</code> as a parameter to initialize <code>_id</code> in the <strong>constructor</strong> of <strong>A</strong> class.</p>
<p>By doing this way we can avoid unnecessary <em>code duplication</em>.</p>
<pre><code class="language-cs">internal class A {
    string _id;    
    internal A(string id) =&gt; _id = id;
}

internal class B : A {
    string _name;
    internal B(string name) : base(id) =&gt; _name = name;
}
</code></pre>
<p>Here we call another constructor inside the same class and create a new <code>Author</code> object from the data provided to the first constructor. This is useful in cases where you already have an object constructed which you want to reuse.</p>
<pre><code class="language-cs">internal class C {
    Author _author;    
    string _message;
    
    internal C(Author author, string message) {
        _author = author;
        _message = message;
    }

    internal C(string id, string name, string message) : this(new Author(id, name), message) {}
}
</code></pre>
<p>Passing in <strong>default values</strong> when default values cannot be used.</p>
<p>This example will not compile, but this is what we’d like to do.</p>
<pre><code class="language-cs">public class D {
    public D(string[] myArray = new string[] {&quot;Entry1&quot;, &quot;Entry2&quot;}) {}
}
</code></pre>
<p>We can make it work by passing a faked default value.</p>
<pre><code class="language-cs">public class E {
    public E(string[] myArray) {}

    public E() : this(new string[] {&quot;Entry1&quot;, &quot;Entry2&quot;}) {}
}
</code></pre>

            ]]>
        </content>
    </entry>
</feed>
